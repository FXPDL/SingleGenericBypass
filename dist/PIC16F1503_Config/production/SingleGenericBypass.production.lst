

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Dec 17 11:52:22 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1503
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     	;# 
    32  0001                     	;# 
    33  0002                     	;# 
    34  0003                     	;# 
    35  0004                     	;# 
    36  0005                     	;# 
    37  0006                     	;# 
    38  0007                     	;# 
    39  0008                     	;# 
    40  0009                     	;# 
    41  000A                     	;# 
    42  000B                     	;# 
    43  000C                     	;# 
    44  000E                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0015                     	;# 
    49  0016                     	;# 
    50  0016                     	;# 
    51  0017                     	;# 
    52  0018                     	;# 
    53  0019                     	;# 
    54  001A                     	;# 
    55  001B                     	;# 
    56  001C                     	;# 
    57  008C                     	;# 
    58  008E                     	;# 
    59  0091                     	;# 
    60  0092                     	;# 
    61  0093                     	;# 
    62  0095                     	;# 
    63  0096                     	;# 
    64  0097                     	;# 
    65  0099                     	;# 
    66  009A                     	;# 
    67  009B                     	;# 
    68  009B                     	;# 
    69  009C                     	;# 
    70  009D                     	;# 
    71  009E                     	;# 
    72  009F                     	;# 
    73  010C                     	;# 
    74  010E                     	;# 
    75  0111                     	;# 
    76  0112                     	;# 
    77  0113                     	;# 
    78  0114                     	;# 
    79  0115                     	;# 
    80  0116                     	;# 
    81  0117                     	;# 
    82  0118                     	;# 
    83  0119                     	;# 
    84  011D                     	;# 
    85  018C                     	;# 
    86  018E                     	;# 
    87  0191                     	;# 
    88  0191                     	;# 
    89  0192                     	;# 
    90  0193                     	;# 
    91  0193                     	;# 
    92  0194                     	;# 
    93  0195                     	;# 
    94  0196                     	;# 
    95  0197                     	;# 
    96  020C                     	;# 
    97  0211                     	;# 
    98  0211                     	;# 
    99  0212                     	;# 
   100  0212                     	;# 
   101  0213                     	;# 
   102  0213                     	;# 
   103  0214                     	;# 
   104  0214                     	;# 
   105  0215                     	;# 
   106  0215                     	;# 
   107  0215                     	;# 
   108  0216                     	;# 
   109  0216                     	;# 
   110  0217                     	;# 
   111  0217                     	;# 
   112  0391                     	;# 
   113  0392                     	;# 
   114  0393                     	;# 
   115  0498                     	;# 
   116  0498                     	;# 
   117  0499                     	;# 
   118  049A                     	;# 
   119  049B                     	;# 
   120  049B                     	;# 
   121  049C                     	;# 
   122  049D                     	;# 
   123  049E                     	;# 
   124  049F                     	;# 
   125  0611                     	;# 
   126  0612                     	;# 
   127  0613                     	;# 
   128  0613                     	;# 
   129  0614                     	;# 
   130  0615                     	;# 
   131  0616                     	;# 
   132  0616                     	;# 
   133  0617                     	;# 
   134  0618                     	;# 
   135  0619                     	;# 
   136  0619                     	;# 
   137  061A                     	;# 
   138  061B                     	;# 
   139  061C                     	;# 
   140  061C                     	;# 
   141  0691                     	;# 
   142  0692                     	;# 
   143  0693                     	;# 
   144  0694                     	;# 
   145  0695                     	;# 
   146  0F0F                     	;# 
   147  0F10                     	;# 
   148  0F11                     	;# 
   149  0F12                     	;# 
   150  0F13                     	;# 
   151  0F14                     	;# 
   152  0F15                     	;# 
   153  0F16                     	;# 
   154  0F17                     	;# 
   155  0F18                     	;# 
   156  0F19                     	;# 
   157  0F1A                     	;# 
   158  0F1B                     	;# 
   159  0F1C                     	;# 
   160  0F1D                     	;# 
   161  0F1E                     	;# 
   162  0F1F                     	;# 
   163  0FE3                     	;# 
   164  0FE4                     	;# 
   165  0FE5                     	;# 
   166  0FE6                     	;# 
   167  0FE7                     	;# 
   168  0FE8                     	;# 
   169  0FE9                     	;# 
   170  0FEA                     	;# 
   171  0FEB                     	;# 
   172  0FED                     	;# 
   173  0FEE                     	;# 
   174  0FEF                     	;# 
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000E                     	;# 
   189  0011                     	;# 
   190  0012                     	;# 
   191  0013                     	;# 
   192  0015                     	;# 
   193  0016                     	;# 
   194  0016                     	;# 
   195  0017                     	;# 
   196  0018                     	;# 
   197  0019                     	;# 
   198  001A                     	;# 
   199  001B                     	;# 
   200  001C                     	;# 
   201  008C                     	;# 
   202  008E                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0095                     	;# 
   207  0096                     	;# 
   208  0097                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009B                     	;# 
   213  009C                     	;# 
   214  009D                     	;# 
   215  009E                     	;# 
   216  009F                     	;# 
   217  010C                     	;# 
   218  010E                     	;# 
   219  0111                     	;# 
   220  0112                     	;# 
   221  0113                     	;# 
   222  0114                     	;# 
   223  0115                     	;# 
   224  0116                     	;# 
   225  0117                     	;# 
   226  0118                     	;# 
   227  0119                     	;# 
   228  011D                     	;# 
   229  018C                     	;# 
   230  018E                     	;# 
   231  0191                     	;# 
   232  0191                     	;# 
   233  0192                     	;# 
   234  0193                     	;# 
   235  0193                     	;# 
   236  0194                     	;# 
   237  0195                     	;# 
   238  0196                     	;# 
   239  0197                     	;# 
   240  020C                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0391                     	;# 
   257  0392                     	;# 
   258  0393                     	;# 
   259  0498                     	;# 
   260  0498                     	;# 
   261  0499                     	;# 
   262  049A                     	;# 
   263  049B                     	;# 
   264  049B                     	;# 
   265  049C                     	;# 
   266  049D                     	;# 
   267  049E                     	;# 
   268  049F                     	;# 
   269  0611                     	;# 
   270  0612                     	;# 
   271  0613                     	;# 
   272  0613                     	;# 
   273  0614                     	;# 
   274  0615                     	;# 
   275  0616                     	;# 
   276  0616                     	;# 
   277  0617                     	;# 
   278  0618                     	;# 
   279  0619                     	;# 
   280  0619                     	;# 
   281  061A                     	;# 
   282  061B                     	;# 
   283  061C                     	;# 
   284  061C                     	;# 
   285  0691                     	;# 
   286  0692                     	;# 
   287  0693                     	;# 
   288  0694                     	;# 
   289  0695                     	;# 
   290  0F0F                     	;# 
   291  0F10                     	;# 
   292  0F11                     	;# 
   293  0F12                     	;# 
   294  0F13                     	;# 
   295  0F14                     	;# 
   296  0F15                     	;# 
   297  0F16                     	;# 
   298  0F17                     	;# 
   299  0F18                     	;# 
   300  0F19                     	;# 
   301  0F1A                     	;# 
   302  0F1B                     	;# 
   303  0F1C                     	;# 
   304  0F1D                     	;# 
   305  0F1E                     	;# 
   306  0F1F                     	;# 
   307  0FE3                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000E                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0015                     	;# 
   337  0016                     	;# 
   338  0016                     	;# 
   339  0017                     	;# 
   340  0018                     	;# 
   341  0019                     	;# 
   342  001A                     	;# 
   343  001B                     	;# 
   344  001C                     	;# 
   345  008C                     	;# 
   346  008E                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0095                     	;# 
   351  0096                     	;# 
   352  0097                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009B                     	;# 
   357  009C                     	;# 
   358  009D                     	;# 
   359  009E                     	;# 
   360  009F                     	;# 
   361  010C                     	;# 
   362  010E                     	;# 
   363  0111                     	;# 
   364  0112                     	;# 
   365  0113                     	;# 
   366  0114                     	;# 
   367  0115                     	;# 
   368  0116                     	;# 
   369  0117                     	;# 
   370  0118                     	;# 
   371  0119                     	;# 
   372  011D                     	;# 
   373  018C                     	;# 
   374  018E                     	;# 
   375  0191                     	;# 
   376  0191                     	;# 
   377  0192                     	;# 
   378  0193                     	;# 
   379  0193                     	;# 
   380  0194                     	;# 
   381  0195                     	;# 
   382  0196                     	;# 
   383  0197                     	;# 
   384  020C                     	;# 
   385  0211                     	;# 
   386  0211                     	;# 
   387  0212                     	;# 
   388  0212                     	;# 
   389  0213                     	;# 
   390  0213                     	;# 
   391  0214                     	;# 
   392  0214                     	;# 
   393  0215                     	;# 
   394  0215                     	;# 
   395  0215                     	;# 
   396  0216                     	;# 
   397  0216                     	;# 
   398  0217                     	;# 
   399  0217                     	;# 
   400  0391                     	;# 
   401  0392                     	;# 
   402  0393                     	;# 
   403  0498                     	;# 
   404  0498                     	;# 
   405  0499                     	;# 
   406  049A                     	;# 
   407  049B                     	;# 
   408  049B                     	;# 
   409  049C                     	;# 
   410  049D                     	;# 
   411  049E                     	;# 
   412  049F                     	;# 
   413  0611                     	;# 
   414  0612                     	;# 
   415  0613                     	;# 
   416  0613                     	;# 
   417  0614                     	;# 
   418  0615                     	;# 
   419  0616                     	;# 
   420  0616                     	;# 
   421  0617                     	;# 
   422  0618                     	;# 
   423  0619                     	;# 
   424  0619                     	;# 
   425  061A                     	;# 
   426  061B                     	;# 
   427  061C                     	;# 
   428  061C                     	;# 
   429  0691                     	;# 
   430  0692                     	;# 
   431  0693                     	;# 
   432  0694                     	;# 
   433  0695                     	;# 
   434  0F0F                     	;# 
   435  0F10                     	;# 
   436  0F11                     	;# 
   437  0F12                     	;# 
   438  0F13                     	;# 
   439  0F14                     	;# 
   440  0F15                     	;# 
   441  0F16                     	;# 
   442  0F17                     	;# 
   443  0F18                     	;# 
   444  0F19                     	;# 
   445  0F1A                     	;# 
   446  0F1B                     	;# 
   447  0F1C                     	;# 
   448  0F1D                     	;# 
   449  0F1E                     	;# 
   450  0F1F                     	;# 
   451  0FE3                     	;# 
   452  0FE4                     	;# 
   453  0FE5                     	;# 
   454  0FE6                     	;# 
   455  0FE7                     	;# 
   456  0FE8                     	;# 
   457  0FE9                     	;# 
   458  0FEA                     	;# 
   459  0FEB                     	;# 
   460  0FED                     	;# 
   461  0FEE                     	;# 
   462  0FEF                     	;# 
   463  0000                     	;# 
   464  0001                     	;# 
   465  0002                     	;# 
   466  0003                     	;# 
   467  0004                     	;# 
   468  0005                     	;# 
   469  0006                     	;# 
   470  0007                     	;# 
   471  0008                     	;# 
   472  0009                     	;# 
   473  000A                     	;# 
   474  000B                     	;# 
   475  000C                     	;# 
   476  000E                     	;# 
   477  0011                     	;# 
   478  0012                     	;# 
   479  0013                     	;# 
   480  0015                     	;# 
   481  0016                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001C                     	;# 
   489  008C                     	;# 
   490  008E                     	;# 
   491  0091                     	;# 
   492  0092                     	;# 
   493  0093                     	;# 
   494  0095                     	;# 
   495  0096                     	;# 
   496  0097                     	;# 
   497  0099                     	;# 
   498  009A                     	;# 
   499  009B                     	;# 
   500  009B                     	;# 
   501  009C                     	;# 
   502  009D                     	;# 
   503  009E                     	;# 
   504  009F                     	;# 
   505  010C                     	;# 
   506  010E                     	;# 
   507  0111                     	;# 
   508  0112                     	;# 
   509  0113                     	;# 
   510  0114                     	;# 
   511  0115                     	;# 
   512  0116                     	;# 
   513  0117                     	;# 
   514  0118                     	;# 
   515  0119                     	;# 
   516  011D                     	;# 
   517  018C                     	;# 
   518  018E                     	;# 
   519  0191                     	;# 
   520  0191                     	;# 
   521  0192                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0194                     	;# 
   525  0195                     	;# 
   526  0196                     	;# 
   527  0197                     	;# 
   528  020C                     	;# 
   529  0211                     	;# 
   530  0211                     	;# 
   531  0212                     	;# 
   532  0212                     	;# 
   533  0213                     	;# 
   534  0213                     	;# 
   535  0214                     	;# 
   536  0214                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0216                     	;# 
   541  0216                     	;# 
   542  0217                     	;# 
   543  0217                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  0498                     	;# 
   548  0498                     	;# 
   549  0499                     	;# 
   550  049A                     	;# 
   551  049B                     	;# 
   552  049B                     	;# 
   553  049C                     	;# 
   554  049D                     	;# 
   555  049E                     	;# 
   556  049F                     	;# 
   557  0611                     	;# 
   558  0612                     	;# 
   559  0613                     	;# 
   560  0613                     	;# 
   561  0614                     	;# 
   562  0615                     	;# 
   563  0616                     	;# 
   564  0616                     	;# 
   565  0617                     	;# 
   566  0618                     	;# 
   567  0619                     	;# 
   568  0619                     	;# 
   569  061A                     	;# 
   570  061B                     	;# 
   571  061C                     	;# 
   572  061C                     	;# 
   573  0691                     	;# 
   574  0692                     	;# 
   575  0693                     	;# 
   576  0694                     	;# 
   577  0695                     	;# 
   578  0F0F                     	;# 
   579  0F10                     	;# 
   580  0F11                     	;# 
   581  0F12                     	;# 
   582  0F13                     	;# 
   583  0F14                     	;# 
   584  0F15                     	;# 
   585  0F16                     	;# 
   586  0F17                     	;# 
   587  0F18                     	;# 
   588  0F19                     	;# 
   589  0F1A                     	;# 
   590  0F1B                     	;# 
   591  0F1C                     	;# 
   592  0F1D                     	;# 
   593  0F1E                     	;# 
   594  0F1F                     	;# 
   595  0FE3                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  000E                     	;# 
   621  0011                     	;# 
   622  0012                     	;# 
   623  0013                     	;# 
   624  0015                     	;# 
   625  0016                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001C                     	;# 
   633  008C                     	;# 
   634  008E                     	;# 
   635  0091                     	;# 
   636  0092                     	;# 
   637  0093                     	;# 
   638  0095                     	;# 
   639  0096                     	;# 
   640  0097                     	;# 
   641  0099                     	;# 
   642  009A                     	;# 
   643  009B                     	;# 
   644  009B                     	;# 
   645  009C                     	;# 
   646  009D                     	;# 
   647  009E                     	;# 
   648  009F                     	;# 
   649  010C                     	;# 
   650  010E                     	;# 
   651  0111                     	;# 
   652  0112                     	;# 
   653  0113                     	;# 
   654  0114                     	;# 
   655  0115                     	;# 
   656  0116                     	;# 
   657  0117                     	;# 
   658  0118                     	;# 
   659  0119                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  020C                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0391                     	;# 
   689  0392                     	;# 
   690  0393                     	;# 
   691  0498                     	;# 
   692  0498                     	;# 
   693  0499                     	;# 
   694  049A                     	;# 
   695  049B                     	;# 
   696  049B                     	;# 
   697  049C                     	;# 
   698  049D                     	;# 
   699  049E                     	;# 
   700  049F                     	;# 
   701  0611                     	;# 
   702  0612                     	;# 
   703  0613                     	;# 
   704  0613                     	;# 
   705  0614                     	;# 
   706  0615                     	;# 
   707  0616                     	;# 
   708  0616                     	;# 
   709  0617                     	;# 
   710  0618                     	;# 
   711  0619                     	;# 
   712  0619                     	;# 
   713  061A                     	;# 
   714  061B                     	;# 
   715  061C                     	;# 
   716  061C                     	;# 
   717  0691                     	;# 
   718  0692                     	;# 
   719  0693                     	;# 
   720  0694                     	;# 
   721  0695                     	;# 
   722  0F0F                     	;# 
   723  0F10                     	;# 
   724  0F11                     	;# 
   725  0F12                     	;# 
   726  0F13                     	;# 
   727  0F14                     	;# 
   728  0F15                     	;# 
   729  0F16                     	;# 
   730  0F17                     	;# 
   731  0F18                     	;# 
   732  0F19                     	;# 
   733  0F1A                     	;# 
   734  0F1B                     	;# 
   735  0F1C                     	;# 
   736  0F1D                     	;# 
   737  0F1E                     	;# 
   738  0F1F                     	;# 
   739  0FE3                     	;# 
   740  0FE4                     	;# 
   741  0FE5                     	;# 
   742  0FE6                     	;# 
   743  0FE7                     	;# 
   744  0FE8                     	;# 
   745  0FE9                     	;# 
   746  0FEA                     	;# 
   747  0FEB                     	;# 
   748  0FED                     	;# 
   749  0FEE                     	;# 
   750  0FEF                     	;# 
   751  0000                     	;# 
   752  0001                     	;# 
   753  0002                     	;# 
   754  0003                     	;# 
   755  0004                     	;# 
   756  0005                     	;# 
   757  0006                     	;# 
   758  0007                     	;# 
   759  0008                     	;# 
   760  0009                     	;# 
   761  000A                     	;# 
   762  000B                     	;# 
   763  000C                     	;# 
   764  000E                     	;# 
   765  0011                     	;# 
   766  0012                     	;# 
   767  0013                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  008C                     	;# 
   778  008E                     	;# 
   779  0091                     	;# 
   780  0092                     	;# 
   781  0093                     	;# 
   782  0095                     	;# 
   783  0096                     	;# 
   784  0097                     	;# 
   785  0099                     	;# 
   786  009A                     	;# 
   787  009B                     	;# 
   788  009B                     	;# 
   789  009C                     	;# 
   790  009D                     	;# 
   791  009E                     	;# 
   792  009F                     	;# 
   793  010C                     	;# 
   794  010E                     	;# 
   795  0111                     	;# 
   796  0112                     	;# 
   797  0113                     	;# 
   798  0114                     	;# 
   799  0115                     	;# 
   800  0116                     	;# 
   801  0117                     	;# 
   802  0118                     	;# 
   803  0119                     	;# 
   804  011D                     	;# 
   805  018C                     	;# 
   806  018E                     	;# 
   807  0191                     	;# 
   808  0191                     	;# 
   809  0192                     	;# 
   810  0193                     	;# 
   811  0193                     	;# 
   812  0194                     	;# 
   813  0195                     	;# 
   814  0196                     	;# 
   815  0197                     	;# 
   816  020C                     	;# 
   817  0211                     	;# 
   818  0211                     	;# 
   819  0212                     	;# 
   820  0212                     	;# 
   821  0213                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0214                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0216                     	;# 
   829  0216                     	;# 
   830  0217                     	;# 
   831  0217                     	;# 
   832  0391                     	;# 
   833  0392                     	;# 
   834  0393                     	;# 
   835  0498                     	;# 
   836  0498                     	;# 
   837  0499                     	;# 
   838  049A                     	;# 
   839  049B                     	;# 
   840  049B                     	;# 
   841  049C                     	;# 
   842  049D                     	;# 
   843  049E                     	;# 
   844  049F                     	;# 
   845  0611                     	;# 
   846  0612                     	;# 
   847  0613                     	;# 
   848  0613                     	;# 
   849  0614                     	;# 
   850  0615                     	;# 
   851  0616                     	;# 
   852  0616                     	;# 
   853  0617                     	;# 
   854  0618                     	;# 
   855  0619                     	;# 
   856  0619                     	;# 
   857  061A                     	;# 
   858  061B                     	;# 
   859  061C                     	;# 
   860  061C                     	;# 
   861  0691                     	;# 
   862  0692                     	;# 
   863  0693                     	;# 
   864  0694                     	;# 
   865  0695                     	;# 
   866  0F0F                     	;# 
   867  0F10                     	;# 
   868  0F11                     	;# 
   869  0F12                     	;# 
   870  0F13                     	;# 
   871  0F14                     	;# 
   872  0F15                     	;# 
   873  0F16                     	;# 
   874  0F17                     	;# 
   875  0F18                     	;# 
   876  0F19                     	;# 
   877  0F1A                     	;# 
   878  0F1B                     	;# 
   879  0F1C                     	;# 
   880  0F1D                     	;# 
   881  0F1E                     	;# 
   882  0F1F                     	;# 
   883  0FE3                     	;# 
   884  0FE4                     	;# 
   885  0FE5                     	;# 
   886  0FE6                     	;# 
   887  0FE7                     	;# 
   888  0FE8                     	;# 
   889  0FE9                     	;# 
   890  0FEA                     	;# 
   891  0FEB                     	;# 
   892  0FED                     	;# 
   893  0FEE                     	;# 
   894  0FEF                     	;# 
   895  0000                     	;# 
   896  0001                     	;# 
   897  0002                     	;# 
   898  0003                     	;# 
   899  0004                     	;# 
   900  0005                     	;# 
   901  0006                     	;# 
   902  0007                     	;# 
   903  0008                     	;# 
   904  0009                     	;# 
   905  000A                     	;# 
   906  000B                     	;# 
   907  000C                     	;# 
   908  000E                     	;# 
   909  0011                     	;# 
   910  0012                     	;# 
   911  0013                     	;# 
   912  0015                     	;# 
   913  0016                     	;# 
   914  0016                     	;# 
   915  0017                     	;# 
   916  0018                     	;# 
   917  0019                     	;# 
   918  001A                     	;# 
   919  001B                     	;# 
   920  001C                     	;# 
   921  008C                     	;# 
   922  008E                     	;# 
   923  0091                     	;# 
   924  0092                     	;# 
   925  0093                     	;# 
   926  0095                     	;# 
   927  0096                     	;# 
   928  0097                     	;# 
   929  0099                     	;# 
   930  009A                     	;# 
   931  009B                     	;# 
   932  009B                     	;# 
   933  009C                     	;# 
   934  009D                     	;# 
   935  009E                     	;# 
   936  009F                     	;# 
   937  010C                     	;# 
   938  010E                     	;# 
   939  0111                     	;# 
   940  0112                     	;# 
   941  0113                     	;# 
   942  0114                     	;# 
   943  0115                     	;# 
   944  0116                     	;# 
   945  0117                     	;# 
   946  0118                     	;# 
   947  0119                     	;# 
   948  011D                     	;# 
   949  018C                     	;# 
   950  018E                     	;# 
   951  0191                     	;# 
   952  0191                     	;# 
   953  0192                     	;# 
   954  0193                     	;# 
   955  0193                     	;# 
   956  0194                     	;# 
   957  0195                     	;# 
   958  0196                     	;# 
   959  0197                     	;# 
   960  020C                     	;# 
   961  0211                     	;# 
   962  0211                     	;# 
   963  0212                     	;# 
   964  0212                     	;# 
   965  0213                     	;# 
   966  0213                     	;# 
   967  0214                     	;# 
   968  0214                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0215                     	;# 
   972  0216                     	;# 
   973  0216                     	;# 
   974  0217                     	;# 
   975  0217                     	;# 
   976  0391                     	;# 
   977  0392                     	;# 
   978  0393                     	;# 
   979  0498                     	;# 
   980  0498                     	;# 
   981  0499                     	;# 
   982  049A                     	;# 
   983  049B                     	;# 
   984  049B                     	;# 
   985  049C                     	;# 
   986  049D                     	;# 
   987  049E                     	;# 
   988  049F                     	;# 
   989  0611                     	;# 
   990  0612                     	;# 
   991  0613                     	;# 
   992  0613                     	;# 
   993  0614                     	;# 
   994  0615                     	;# 
   995  0616                     	;# 
   996  0616                     	;# 
   997  0617                     	;# 
   998  0618                     	;# 
   999  0619                     	;# 
  1000  0619                     	;# 
  1001  061A                     	;# 
  1002  061B                     	;# 
  1003  061C                     	;# 
  1004  061C                     	;# 
  1005  0691                     	;# 
  1006  0692                     	;# 
  1007  0693                     	;# 
  1008  0694                     	;# 
  1009  0695                     	;# 
  1010  0F0F                     	;# 
  1011  0F10                     	;# 
  1012  0F11                     	;# 
  1013  0F12                     	;# 
  1014  0F13                     	;# 
  1015  0F14                     	;# 
  1016  0F15                     	;# 
  1017  0F16                     	;# 
  1018  0F17                     	;# 
  1019  0F18                     	;# 
  1020  0F19                     	;# 
  1021  0F1A                     	;# 
  1022  0F1B                     	;# 
  1023  0F1C                     	;# 
  1024  0F1D                     	;# 
  1025  0F1E                     	;# 
  1026  0F1F                     	;# 
  1027  0FE3                     	;# 
  1028  0FE4                     	;# 
  1029  0FE5                     	;# 
  1030  0FE6                     	;# 
  1031  0FE7                     	;# 
  1032  0FE8                     	;# 
  1033  0FE9                     	;# 
  1034  0FEA                     	;# 
  1035  0FEB                     	;# 
  1036  0FED                     	;# 
  1037  0FEE                     	;# 
  1038  0FEF                     	;# 
  1039  0000                     	;# 
  1040  0001                     	;# 
  1041  0002                     	;# 
  1042  0003                     	;# 
  1043  0004                     	;# 
  1044  0005                     	;# 
  1045  0006                     	;# 
  1046  0007                     	;# 
  1047  0008                     	;# 
  1048  0009                     	;# 
  1049  000A                     	;# 
  1050  000B                     	;# 
  1051  000C                     	;# 
  1052  000E                     	;# 
  1053  0011                     	;# 
  1054  0012                     	;# 
  1055  0013                     	;# 
  1056  0015                     	;# 
  1057  0016                     	;# 
  1058  0016                     	;# 
  1059  0017                     	;# 
  1060  0018                     	;# 
  1061  0019                     	;# 
  1062  001A                     	;# 
  1063  001B                     	;# 
  1064  001C                     	;# 
  1065  008C                     	;# 
  1066  008E                     	;# 
  1067  0091                     	;# 
  1068  0092                     	;# 
  1069  0093                     	;# 
  1070  0095                     	;# 
  1071  0096                     	;# 
  1072  0097                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  009F                     	;# 
  1081  010C                     	;# 
  1082  010E                     	;# 
  1083  0111                     	;# 
  1084  0112                     	;# 
  1085  0113                     	;# 
  1086  0114                     	;# 
  1087  0115                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  0118                     	;# 
  1091  0119                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  020C                     	;# 
  1105  0211                     	;# 
  1106  0211                     	;# 
  1107  0212                     	;# 
  1108  0212                     	;# 
  1109  0213                     	;# 
  1110  0213                     	;# 
  1111  0214                     	;# 
  1112  0214                     	;# 
  1113  0215                     	;# 
  1114  0215                     	;# 
  1115  0215                     	;# 
  1116  0216                     	;# 
  1117  0216                     	;# 
  1118  0217                     	;# 
  1119  0217                     	;# 
  1120  0391                     	;# 
  1121  0392                     	;# 
  1122  0393                     	;# 
  1123  0498                     	;# 
  1124  0498                     	;# 
  1125  0499                     	;# 
  1126  049A                     	;# 
  1127  049B                     	;# 
  1128  049B                     	;# 
  1129  049C                     	;# 
  1130  049D                     	;# 
  1131  049E                     	;# 
  1132  049F                     	;# 
  1133  0611                     	;# 
  1134  0612                     	;# 
  1135  0613                     	;# 
  1136  0613                     	;# 
  1137  0614                     	;# 
  1138  0615                     	;# 
  1139  0616                     	;# 
  1140  0616                     	;# 
  1141  0617                     	;# 
  1142  0618                     	;# 
  1143  0619                     	;# 
  1144  0619                     	;# 
  1145  061A                     	;# 
  1146  061B                     	;# 
  1147  061C                     	;# 
  1148  061C                     	;# 
  1149  0691                     	;# 
  1150  0692                     	;# 
  1151  0693                     	;# 
  1152  0694                     	;# 
  1153  0695                     	;# 
  1154  0F0F                     	;# 
  1155  0F10                     	;# 
  1156  0F11                     	;# 
  1157  0F12                     	;# 
  1158  0F13                     	;# 
  1159  0F14                     	;# 
  1160  0F15                     	;# 
  1161  0F16                     	;# 
  1162  0F17                     	;# 
  1163  0F18                     	;# 
  1164  0F19                     	;# 
  1165  0F1A                     	;# 
  1166  0F1B                     	;# 
  1167  0F1C                     	;# 
  1168  0F1D                     	;# 
  1169  0F1E                     	;# 
  1170  0F1F                     	;# 
  1171  0FE3                     	;# 
  1172  0FE4                     	;# 
  1173  0FE5                     	;# 
  1174  0FE6                     	;# 
  1175  0FE7                     	;# 
  1176  0FE8                     	;# 
  1177  0FE9                     	;# 
  1178  0FEA                     	;# 
  1179  0FEB                     	;# 
  1180  0FED                     	;# 
  1181  0FEE                     	;# 
  1182  0FEF                     	;# 
  1183  0000                     	;# 
  1184  0001                     	;# 
  1185  0002                     	;# 
  1186  0003                     	;# 
  1187  0004                     	;# 
  1188  0005                     	;# 
  1189  0006                     	;# 
  1190  0007                     	;# 
  1191  0008                     	;# 
  1192  0009                     	;# 
  1193  000A                     	;# 
  1194  000B                     	;# 
  1195  000C                     	;# 
  1196  000E                     	;# 
  1197  0011                     	;# 
  1198  0012                     	;# 
  1199  0013                     	;# 
  1200  0015                     	;# 
  1201  0016                     	;# 
  1202  0016                     	;# 
  1203  0017                     	;# 
  1204  0018                     	;# 
  1205  0019                     	;# 
  1206  001A                     	;# 
  1207  001B                     	;# 
  1208  001C                     	;# 
  1209  008C                     	;# 
  1210  008E                     	;# 
  1211  0091                     	;# 
  1212  0092                     	;# 
  1213  0093                     	;# 
  1214  0095                     	;# 
  1215  0096                     	;# 
  1216  0097                     	;# 
  1217  0099                     	;# 
  1218  009A                     	;# 
  1219  009B                     	;# 
  1220  009B                     	;# 
  1221  009C                     	;# 
  1222  009D                     	;# 
  1223  009E                     	;# 
  1224  009F                     	;# 
  1225  010C                     	;# 
  1226  010E                     	;# 
  1227  0111                     	;# 
  1228  0112                     	;# 
  1229  0113                     	;# 
  1230  0114                     	;# 
  1231  0115                     	;# 
  1232  0116                     	;# 
  1233  0117                     	;# 
  1234  0118                     	;# 
  1235  0119                     	;# 
  1236  011D                     	;# 
  1237  018C                     	;# 
  1238  018E                     	;# 
  1239  0191                     	;# 
  1240  0191                     	;# 
  1241  0192                     	;# 
  1242  0193                     	;# 
  1243  0193                     	;# 
  1244  0194                     	;# 
  1245  0195                     	;# 
  1246  0196                     	;# 
  1247  0197                     	;# 
  1248  020C                     	;# 
  1249  0211                     	;# 
  1250  0211                     	;# 
  1251  0212                     	;# 
  1252  0212                     	;# 
  1253  0213                     	;# 
  1254  0213                     	;# 
  1255  0214                     	;# 
  1256  0214                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0215                     	;# 
  1260  0216                     	;# 
  1261  0216                     	;# 
  1262  0217                     	;# 
  1263  0217                     	;# 
  1264  0391                     	;# 
  1265  0392                     	;# 
  1266  0393                     	;# 
  1267  0498                     	;# 
  1268  0498                     	;# 
  1269  0499                     	;# 
  1270  049A                     	;# 
  1271  049B                     	;# 
  1272  049B                     	;# 
  1273  049C                     	;# 
  1274  049D                     	;# 
  1275  049E                     	;# 
  1276  049F                     	;# 
  1277  0611                     	;# 
  1278  0612                     	;# 
  1279  0613                     	;# 
  1280  0613                     	;# 
  1281  0614                     	;# 
  1282  0615                     	;# 
  1283  0616                     	;# 
  1284  0616                     	;# 
  1285  0617                     	;# 
  1286  0618                     	;# 
  1287  0619                     	;# 
  1288  0619                     	;# 
  1289  061A                     	;# 
  1290  061B                     	;# 
  1291  061C                     	;# 
  1292  061C                     	;# 
  1293  0691                     	;# 
  1294  0692                     	;# 
  1295  0693                     	;# 
  1296  0694                     	;# 
  1297  0695                     	;# 
  1298  0F0F                     	;# 
  1299  0F10                     	;# 
  1300  0F11                     	;# 
  1301  0F12                     	;# 
  1302  0F13                     	;# 
  1303  0F14                     	;# 
  1304  0F15                     	;# 
  1305  0F16                     	;# 
  1306  0F17                     	;# 
  1307  0F18                     	;# 
  1308  0F19                     	;# 
  1309  0F1A                     	;# 
  1310  0F1B                     	;# 
  1311  0F1C                     	;# 
  1312  0F1D                     	;# 
  1313  0F1E                     	;# 
  1314  0F1F                     	;# 
  1315  0FE3                     	;# 
  1316  0FE4                     	;# 
  1317  0FE5                     	;# 
  1318  0FE6                     	;# 
  1319  0FE7                     	;# 
  1320  0FE8                     	;# 
  1321  0FE9                     	;# 
  1322  0FEA                     	;# 
  1323  0FEB                     	;# 
  1324  0FED                     	;# 
  1325  0FEE                     	;# 
  1326  0FEF                     	;# 
  1327                           
  1328                           	psect	idataBANK0
  1329  0251                     __pidataBANK0:	
  1330                           
  1331                           ;initializer for _switch1_state
  1332  0251  34FF               	retlw	255
  1333  0252  34FF               	retlw	255
  1334                           
  1335                           ;initializer for _switch1_up
  1336  0253  3401               	retlw	1
  1337  0254  3400               	retlw	0
  1338  000B                     _INTCONbits	set	11
  1339  0011                     _PIR1bits	set	17
  1340  000C                     _PORTAbits	set	12
  1341  001C                     _T2CONbits	set	28
  1342  009D                     _ADCON0bits	set	157
  1343  009E                     _ADCON1bits	set	158
  1344  009C                     _ADRESH	set	156
  1345  009B                     _ADRESL	set	155
  1346  0099                     _OSCCONbits	set	153
  1347  009A                     _OSCSTAT	set	154
  1348  008C                     _TRISAbits	set	140
  1349  008E                     _TRISCbits	set	142
  1350  010C                     _LATAbits	set	268
  1351  010E                     _LATCbits	set	270
  1352  0191                     _PMADR	set	401
  1353  018C                     _ANSELAbits	set	396
  1354  0192                     _PMADRH	set	402
  1355  0191                     _PMADRL	set	401
  1356  0195                     _PMCON1bits	set	405
  1357  0196                     _PMCON2	set	406
  1358  0194                     _PMDATH	set	404
  1359  0193                     _PMDATL	set	403
  1360                           
  1361                           ; #config settings
  1362  0000                     
  1363                           	psect	cinit
  1364  000E                     start_initialization:	
  1365  000E                     __initialization:	
  1366                           
  1367                           ; Clear objects allocated to BANK0
  1368  000E  3020               	movlw	low __pbssBANK0
  1369  000F  0084               	movwf	4
  1370  0010  3000               	movlw	high __pbssBANK0
  1371  0011  0085               	movwf	5
  1372  0012  300E               	movlw	14
  1373  0013  223C               	fcall	clear_ram0
  1374                           
  1375                           ; Initialize objects allocated to BANK0
  1376  0014  2251               	fcall	__pidataBANK0	;fetch initializer
  1377  0015  00B7               	movwf	__pdataBANK0& (0+127)
  1378  0016  2252               	fcall	__pidataBANK0+1	;fetch initializer
  1379  0017  00B8               	movwf	(__pdataBANK0+1)& (0+127)
  1380  0018  2253               	fcall	__pidataBANK0+2	;fetch initializer
  1381  0019  00B9               	movwf	(__pdataBANK0+2)& (0+127)
  1382  001A  2254               	fcall	__pidataBANK0+3	;fetch initializer
  1383  001B  00BA               	movwf	(__pdataBANK0+3)& (0+127)
  1384  001C                     end_of_initialization:	
  1385                           ;End of C runtime variable initialization code
  1386                           
  1387  001C                     __end_of__initialization:	
  1388  001C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1389  001D  0020               	movlb	0
  1390  001E  2A42               	ljmp	_main	;jump to C main() function
  1391                           
  1392                           	psect	bssBANK0
  1393  0020                     __pbssBANK0:	
  1394  0020                     wait_ms@timel:	
  1395  0020                     	ds	4
  1396  0024                     _isInitialized:	
  1397  0024                     	ds	2
  1398  0026                     _switch1_pressed:	
  1399  0026                     	ds	2
  1400  0028                     _switch1_toggle:	
  1401  0028                     	ds	2
  1402  002A                     _pedalState:	
  1403  002A                     	ds	4
  1404                           
  1405                           	psect	dataBANK0
  1406  0037                     __pdataBANK0:	
  1407  0037                     _switch1_state:	
  1408  0037                     	ds	2
  1409  0039                     _switch1_up:	
  1410  0039                     	ds	2
  1411                           
  1412                           	psect	clrtext
  1413  023C                     clear_ram0:	
  1414                           ;	Called with FSR0 containing the base address, and
  1415                           ;	WREG with the size to clear
  1416                           
  1417  023C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1418  023D                     clrloop0:	
  1419  023D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1420  023E  3101               	addfsr 0,1
  1421  023F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1422  0240  2A3D               	goto	clrloop0	;have we reached the end yet?
  1423  0241  3400               	retlw	0	;all done for this memory range, return
  1424                           
  1425                           	psect	cstackCOMMON
  1426  0070                     __pcstackCOMMON:	
  1427  0070                     ?_ConfigureOscillator:	
  1428  0070                     ?_InitApp:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0070                     ?_initSwitch1:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ?_updateSwitch1:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ?_init_adc:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ?_saveState:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ?_isr:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ??_isr:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_main:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ?_initStateManager:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ?_getCurrentState:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458                           
  1459                           ; 4 bytes @ 0x0
  1460  0070                     	ds	1
  1461  0071                     ?_FLASH_EraseBlock:	
  1462  0071                     ??_ConfigureOscillator:	
  1463                           ; 1 bytes @ 0x1
  1464                           
  1465  0071                     ??_InitApp:	
  1466                           ; 1 bytes @ 0x1
  1467                           
  1468  0071                     ??_init_adc:	
  1469                           ; 1 bytes @ 0x1
  1470                           
  1471  0071                     ?_FLASH_ReadWord:	
  1472                           ; 1 bytes @ 0x1
  1473                           
  1474  0071                     ?___lmul:	
  1475                           ; 2 bytes @ 0x1
  1476                           
  1477  0071                     FLASH_ReadWord@flashAddr:	
  1478                           ; 4 bytes @ 0x1
  1479                           
  1480  0071                     FLASH_EraseBlock@startAddr:	
  1481                           ; 2 bytes @ 0x1
  1482                           
  1483  0071                     ___lmul@multiplier:	
  1484                           ; 2 bytes @ 0x1
  1485                           
  1486                           
  1487                           ; 4 bytes @ 0x1
  1488  0071                     	ds	2
  1489  0073                     ??_FLASH_EraseBlock:	
  1490  0073                     ??_FLASH_ReadWord:	
  1491                           ; 1 bytes @ 0x3
  1492                           
  1493  0073                     FLASH_ReadWord@GIEBitValue:	
  1494                           ; 1 bytes @ 0x3
  1495                           
  1496  0073                     FLASH_EraseBlock@GIEBitValue:	
  1497                           ; 1 bytes @ 0x3
  1498                           
  1499                           
  1500                           ; 1 bytes @ 0x3
  1501  0073                     	ds	1
  1502  0074                     ?_HEF_ByteArrayWrite:	
  1503  0074                     ?_HEF_ByteArrayRead:	
  1504                           ; 1 bytes @ 0x4
  1505                           
  1506  0074                     HEF_ByteArrayWrite@byteArray:	
  1507                           ; 1 bytes @ 0x4
  1508                           
  1509  0074                     HEF_ByteArrayRead@block:	
  1510                           ; 1 bytes @ 0x4
  1511                           
  1512                           
  1513                           ; 1 bytes @ 0x4
  1514  0074                     	ds	1
  1515  0075                     HEF_ByteArrayWrite@count:	
  1516  0075                     HEF_ByteArrayRead@count:	
  1517                           ; 1 bytes @ 0x5
  1518                           
  1519  0075                     ___lmul@multiplicand:	
  1520                           ; 1 bytes @ 0x5
  1521                           
  1522                           
  1523                           ; 4 bytes @ 0x5
  1524  0075                     	ds	1
  1525  0076                     ??_HEF_ByteArrayWrite:	
  1526  0076                     ??_HEF_ByteArrayRead:	
  1527                           ; 1 bytes @ 0x6
  1528                           
  1529                           
  1530                           ; 1 bytes @ 0x6
  1531  0076                     	ds	2
  1532  0078                     HEF_ByteArrayWrite@GIEBitValue:	
  1533  0078                     HEF_ByteArrayRead@wordAdd:	
  1534                           ; 1 bytes @ 0x8
  1535                           
  1536                           
  1537                           ; 2 bytes @ 0x8
  1538  0078                     	ds	1
  1539  0079                     ??___lmul:	
  1540  0079                     HEF_ByteArrayWrite@block:	
  1541                           ; 1 bytes @ 0x9
  1542                           
  1543  0079                     ___lmul@product:	
  1544                           ; 1 bytes @ 0x9
  1545                           
  1546                           
  1547                           ; 4 bytes @ 0x9
  1548  0079                     	ds	1
  1549  007A                     HEF_ByteArrayRead@bArray:	
  1550  007A                     HEF_ByteArrayWrite@blockAddr:	
  1551                           ; 1 bytes @ 0xA
  1552                           
  1553                           
  1554                           ; 2 bytes @ 0xA
  1555  007A                     	ds	1
  1556  007B                     ??_getCurrentState:	
  1557                           
  1558                           ; 1 bytes @ 0xB
  1559  007B                     	ds	1
  1560  007C                     saveState@r:	
  1561                           
  1562                           ; 1 bytes @ 0xC
  1563  007C                     	ds	1
  1564  007D                     ??_initSwitch1:	
  1565  007D                     ??_setSwitch1State:	
  1566                           ; 1 bytes @ 0xD
  1567                           
  1568  007D                     ??_main:	
  1569                           ; 1 bytes @ 0xD
  1570                           
  1571  007D                     ??_wait_ms:	
  1572                           ; 1 bytes @ 0xD
  1573                           
  1574  007D                     ??_initStateManager:	
  1575                           ; 1 bytes @ 0xD
  1576                           
  1577  007D                     ??_getSwitch1State:	
  1578                           ; 1 bytes @ 0xD
  1579                           
  1580  007D                     ??_updateSwitch1State:	
  1581                           ; 1 bytes @ 0xD
  1582                           
  1583                           
  1584                           	psect	cstackBANK0
  1585  002E                     __pcstackBANK0:	
  1586                           ; 1 bytes @ 0xD
  1587                           
  1588  002E                     ??_saveState:	
  1589  002E                     ?_wait_ms:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  002E                     getCurrentState@r:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  002E                     wait_ms@time:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598                           
  1599                           ; 2 bytes @ 0x0
  1600  002E                     	ds	1
  1601  002F                     ?_getSwitch1State:	
  1602                           
  1603                           ; 2 bytes @ 0x1
  1604  002F                     	ds	2
  1605  0031                     ?_updateSwitch1State:	
  1606  0031                     updateSwitch1State@state:	
  1607                           ; 1 bytes @ 0x3
  1608                           
  1609                           
  1610                           ; 2 bytes @ 0x3
  1611  0031                     	ds	2
  1612  0033                     ?_setSwitch1State:	
  1613  0033                     setSwitch1State@f_state:	
  1614                           ; 1 bytes @ 0x5
  1615                           
  1616                           
  1617                           ; 2 bytes @ 0x5
  1618  0033                     	ds	2
  1619  0035                     ??_updateSwitch1:	
  1620  0035                     initSwitch1@initState:	
  1621                           ; 1 bytes @ 0x7
  1622                           
  1623                           
  1624                           ; 2 bytes @ 0x7
  1625  0035                     	ds	2
  1626                           
  1627                           	psect	maintext
  1628  0242                     __pmaintext:	
  1629 ;;
  1630 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1631 ;;
  1632 ;; *************** function _main *****************
  1633 ;; Defined at:
  1634 ;;		line 22 in file "main.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;		None
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : B1F/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMMON   BANK0   BANK1
  1648 ;;      Params:         0       0       0
  1649 ;;      Locals:         0       0       0
  1650 ;;      Temps:          0       0       0
  1651 ;;      Totals:         0       0       0
  1652 ;;Total ram usage:        0 bytes
  1653 ;; Hardware stack levels required when called:    7
  1654 ;; This function calls:
  1655 ;;		_ConfigureOscillator
  1656 ;;		_InitApp
  1657 ;;		_initSwitch1
  1658 ;;		_updateSwitch1
  1659 ;; This function is called by:
  1660 ;;		Startup code after reset
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           
  1665                           ;psect for function _main
  1666  0242                     _main:	
  1667                           
  1668                           ;main.c: 23: ConfigureOscillator();
  1669                           
  1670                           ;incstack = 0
  1671                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1672  0242  224C               	fcall	_ConfigureOscillator
  1673                           
  1674                           ;main.c: 24: InitApp();
  1675  0243  21E8               	fcall	_InitApp
  1676                           
  1677                           ;main.c: 26: initSwitch1();
  1678  0244  221A               	fcall	_initSwitch1
  1679  0245                     l1249:	
  1680                           ;main.c: 28: while (1) {
  1681                           
  1682                           
  1683                           ;main.c: 29: updateSwitch1();
  1684  0245  201F               	fcall	_updateSwitch1
  1685  0246  2A45               	goto	l1249
  1686  0247                     __end_of_main:	
  1687                           
  1688                           	psect	text1
  1689  001F                     __ptext1:	
  1690 ;; *************** function _updateSwitch1 *****************
  1691 ;; Defined at:
  1692 ;;		line 27 in file "switch1.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMMON   BANK0   BANK1
  1706 ;;      Params:         0       0       0
  1707 ;;      Locals:         0       0       0
  1708 ;;      Temps:          0       1       0
  1709 ;;      Totals:         0       1       0
  1710 ;;Total ram usage:        1 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    6
  1713 ;; This function calls:
  1714 ;;		_setSwitch1State
  1715 ;; This function is called by:
  1716 ;;		_main
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           
  1721                           ;psect for function _updateSwitch1
  1722  001F                     _updateSwitch1:	
  1723                           
  1724                           ;switch1.c: 34: if (PORTAbits.RA5 == 0) {
  1725                           
  1726                           ;incstack = 0
  1727                           ; Regs used in _updateSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1728  001F  0020               	movlb	0	; select bank0
  1729  0020  1A8C               	btfsc	12,5	;volatile
  1730  0021  2832               	goto	l1149
  1731                           
  1732                           ;switch1.c: 35: if (switch1_pressed > 0) {
  1733  0022  0827               	movf	_switch1_pressed+1,w
  1734  0023  3A80               	xorlw	128
  1735  0024  00B5               	movwf	??_updateSwitch1
  1736  0025  3080               	movlw	128
  1737  0026  0235               	subwf	??_updateSwitch1,w
  1738  0027  1D03               	skipz
  1739  0028  282B               	goto	u605
  1740  0029  3001               	movlw	1
  1741  002A  0226               	subwf	_switch1_pressed,w
  1742  002B                     u605:	
  1743  002B  1C03               	skipc
  1744  002C  2842               	goto	l1153
  1745                           
  1746                           ;switch1.c: 36: switch1_pressed--;
  1747  002D  30FF               	movlw	255
  1748  002E  0020               	movlb	0	; select bank0
  1749  002F  07A6               	addwf	_switch1_pressed,f
  1750  0030  30FF               	movlw	255
  1751  0031  2841               	goto	L1
  1752  0032                     l1149:	
  1753                           ;switch1.c: 37: }
  1754                           ;switch1.c: 38: } else if (switch1_pressed < 25) {
  1755                           
  1756  0032  0827               	movf	_switch1_pressed+1,w
  1757  0033  3A80               	xorlw	128
  1758  0034  00B5               	movwf	??_updateSwitch1
  1759  0035  3080               	movlw	128
  1760  0036  0235               	subwf	??_updateSwitch1,w
  1761  0037  1D03               	skipz
  1762  0038  283B               	goto	u615
  1763  0039  3019               	movlw	25
  1764  003A  0226               	subwf	_switch1_pressed,w
  1765  003B                     u615:	
  1766  003B  1803               	skipnc
  1767  003C  2842               	goto	l1153
  1768                           
  1769                           ;switch1.c: 39: switch1_pressed++;
  1770  003D  3001               	movlw	1
  1771  003E  0020               	movlb	0	; select bank0
  1772  003F  07A6               	addwf	_switch1_pressed,f
  1773  0040  3000               	movlw	0
  1774  0041                     L1:	
  1775  0041  3DA7               	addwfc	_switch1_pressed+1,f
  1776  0042                     l1153:	
  1777                           
  1778                           ;switch1.c: 40: }
  1779                           ;switch1.c: 46: if (switch1_pressed == 0) {
  1780  0042  0020               	movlb	0	; select bank0
  1781  0043  0826               	movf	_switch1_pressed,w
  1782  0044  0427               	iorwf	_switch1_pressed+1,w
  1783  0045  1D03               	btfss	3,2
  1784  0046  285F               	goto	l1167
  1785                           
  1786                           ;switch1.c: 47: if (switch1_state == 1) {
  1787  0047  0337               	decf	_switch1_state,w
  1788  0048  0438               	iorwf	_switch1_state+1,w
  1789  0049  1D03               	btfss	3,2
  1790  004A  2854               	goto	l1161
  1791                           
  1792                           ;switch1.c: 48: if (switch1_up == 1) {
  1793  004B  0339               	decf	_switch1_up,w
  1794  004C  043A               	iorwf	_switch1_up+1,w
  1795  004D  1D03               	btfss	3,2
  1796  004E  285B               	goto	l1165
  1797                           
  1798                           ;switch1.c: 49: switch1_toggle = 1;
  1799  004F  3001               	movlw	1
  1800  0050  00A8               	movwf	_switch1_toggle
  1801  0051  3000               	movlw	0
  1802  0052  00A9               	movwf	_switch1_toggle+1
  1803                           
  1804                           ;switch1.c: 50: }
  1805                           ;switch1.c: 51: } else {
  1806  0053  285B               	goto	l1165
  1807  0054                     l1161:	
  1808                           
  1809                           ;switch1.c: 53: switch1_toggle = 0;
  1810  0054  01A8               	clrf	_switch1_toggle
  1811  0055  01A9               	clrf	_switch1_toggle+1
  1812                           
  1813                           ;switch1.c: 54: setSwitch1State(1);
  1814  0056  3001               	movlw	1
  1815  0057  00B3               	movwf	setSwitch1State@f_state
  1816  0058  3000               	movlw	0
  1817  0059  00B4               	movwf	setSwitch1State@f_state+1
  1818  005A  20D2               	fcall	_setSwitch1State
  1819  005B                     l1165:	
  1820                           
  1821                           ;switch1.c: 55: }
  1822                           ;switch1.c: 58: switch1_up = 0;
  1823  005B  0020               	movlb	0	; select bank0
  1824  005C  01B9               	clrf	_switch1_up
  1825  005D  01BA               	clrf	_switch1_up+1
  1826                           
  1827                           ;switch1.c: 59: } else if (switch1_pressed >= 25) {
  1828  005E  0008               	return
  1829  005F                     l1167:	
  1830  005F  0827               	movf	_switch1_pressed+1,w
  1831  0060  3A80               	xorlw	128
  1832  0061  00B5               	movwf	??_updateSwitch1
  1833  0062  3080               	movlw	128
  1834  0063  0235               	subwf	??_updateSwitch1,w
  1835  0064  1D03               	skipz
  1836  0065  2868               	goto	u655
  1837  0066  3019               	movlw	25
  1838  0067  0226               	subwf	_switch1_pressed,w
  1839  0068                     u655:	
  1840  0068  1C03               	skipc
  1841  0069  0008               	return
  1842                           
  1843                           ;switch1.c: 60: if (switch1_toggle == 1) {
  1844  006A  0020               	movlb	0	; select bank0
  1845  006B  0328               	decf	_switch1_toggle,w
  1846  006C  0429               	iorwf	_switch1_toggle+1,w
  1847  006D  1D03               	btfss	3,2
  1848  006E  2873               	goto	l1173
  1849                           
  1850                           ;switch1.c: 61: setSwitch1State(0);
  1851  006F  3000               	movlw	0
  1852  0070  00B3               	movwf	setSwitch1State@f_state
  1853  0071  00B4               	movwf	setSwitch1State@f_state+1
  1854  0072  20D2               	fcall	_setSwitch1State
  1855  0073                     l1173:	
  1856                           
  1857                           ;switch1.c: 62: }
  1858                           ;switch1.c: 63: switch1_toggle = 0;
  1859  0073  0020               	movlb	0	; select bank0
  1860  0074  01A8               	clrf	_switch1_toggle
  1861  0075  01A9               	clrf	_switch1_toggle+1
  1862                           
  1863                           ;switch1.c: 64: switch1_up = 1;
  1864  0076  3001               	movlw	1
  1865  0077  00B9               	movwf	_switch1_up
  1866  0078  3000               	movlw	0
  1867  0079  00BA               	movwf	_switch1_up+1
  1868                           
  1869                           ;switch1.c: 65: switch1_pressed = 25;
  1870  007A  3019               	movlw	25
  1871  007B  00A6               	movwf	_switch1_pressed
  1872  007C  3000               	movlw	0
  1873  007D  00A7               	movwf	_switch1_pressed+1
  1874  007E  0008               	return
  1875  007F                     __end_of_updateSwitch1:	
  1876                           
  1877                           	psect	text2
  1878  021A                     __ptext2:	
  1879 ;; *************** function _initSwitch1 *****************
  1880 ;; Defined at:
  1881 ;;		line 22 in file "switch1.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  initState       2    7[BANK0 ] int 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      void 
  1888 ;; Registers used:
  1889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1
  1895 ;;      Params:         0       0       0
  1896 ;;      Locals:         0       2       0
  1897 ;;      Temps:          0       0       0
  1898 ;;      Totals:         0       2       0
  1899 ;;Total ram usage:        2 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    6
  1902 ;; This function calls:
  1903 ;;		_getSwitch1State
  1904 ;;		_setSwitch1State
  1905 ;; This function is called by:
  1906 ;;		_main
  1907 ;; This function uses a non-reentrant model
  1908 ;;
  1909                           
  1910                           
  1911                           ;psect for function _initSwitch1
  1912  021A                     _initSwitch1:	
  1913                           
  1914                           ;switch1.c: 23: int initState = getSwitch1State();
  1915                           
  1916                           ;incstack = 0
  1917                           ; Regs used in _initSwitch1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1918  021A  2226               	fcall	_getSwitch1State
  1919  021B  0020               	movlb	0	; select bank0
  1920  021C  0830               	movf	?_getSwitch1State+1,w
  1921  021D  00B6               	movwf	initSwitch1@initState+1
  1922  021E  082F               	movf	?_getSwitch1State,w
  1923  021F  00B5               	movwf	initSwitch1@initState
  1924                           
  1925                           ;switch1.c: 24: setSwitch1State(initState);
  1926  0220  0836               	movf	initSwitch1@initState+1,w
  1927  0221  00B4               	movwf	setSwitch1State@f_state+1
  1928  0222  0835               	movf	initSwitch1@initState,w
  1929  0223  00B3               	movwf	setSwitch1State@f_state
  1930  0224  20D2               	fcall	_setSwitch1State
  1931  0225  0008               	return
  1932  0226                     __end_of_initSwitch1:	
  1933                           
  1934                           	psect	text3
  1935  00D2                     __ptext3:	
  1936 ;; *************** function _setSwitch1State *****************
  1937 ;; Defined at:
  1938 ;;		line 72 in file "switch1.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  f_state         2    5[BANK0 ] int 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;		None
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  1    wreg      void 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMMON   BANK0   BANK1
  1952 ;;      Params:         0       2       0
  1953 ;;      Locals:         0       0       0
  1954 ;;      Temps:          0       0       0
  1955 ;;      Totals:         0       2       0
  1956 ;;Total ram usage:        2 bytes
  1957 ;; Hardware stack levels used:    1
  1958 ;; Hardware stack levels required when called:    5
  1959 ;; This function calls:
  1960 ;;		_updateSwitch1State
  1961 ;;		_wait_ms
  1962 ;; This function is called by:
  1963 ;;		_initSwitch1
  1964 ;;		_updateSwitch1
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _setSwitch1State
  1970  00D2                     _setSwitch1State:	
  1971                           
  1972                           ;switch1.c: 73: if (switch1_state == f_state) {return;}
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in _setSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1976  00D2  0020               	movlb	0	; select bank0
  1977  00D3  0834               	movf	setSwitch1State@f_state+1,w
  1978  00D4  0638               	xorwf	_switch1_state+1,w
  1979  00D5  1D03               	skipz
  1980  00D6  28D9               	goto	u565
  1981  00D7  0833               	movf	setSwitch1State@f_state,w
  1982  00D8  0637               	xorwf	_switch1_state,w
  1983  00D9                     u565:	
  1984  00D9  1903               	btfsc	3,2
  1985  00DA  0008               	return
  1986                           
  1987                           ;switch1.c: 74: switch1_state = f_state;
  1988  00DB  0834               	movf	setSwitch1State@f_state+1,w
  1989  00DC  00B8               	movwf	_switch1_state+1
  1990  00DD  0833               	movf	setSwitch1State@f_state,w
  1991  00DE  00B7               	movwf	_switch1_state
  1992                           
  1993                           ;switch1.c: 75: LATCbits.LATC5 = f_state;
  1994  00DF  0C33               	rrf	setSwitch1State@f_state,w
  1995  00E0  0022               	movlb	2	; select bank2
  1996  00E1  1C03               	skipc
  1997  00E2  128E               	bcf	14,5	;volatile
  1998  00E3  1803               	skipnc
  1999  00E4  168E               	bsf	14,5	;volatile
  2000                           
  2001                           ;switch1.c: 76: LATCbits.LATC0 = f_state;
  2002  00E5  0020               	movlb	0	; select bank0
  2003  00E6  0C33               	rrf	setSwitch1State@f_state,w
  2004  00E7  0022               	movlb	2	; select bank2
  2005  00E8  1C03               	skipc
  2006  00E9  100E               	bcf	14,0	;volatile
  2007  00EA  1803               	skipnc
  2008  00EB  140E               	bsf	14,0	;volatile
  2009                           
  2010                           ;switch1.c: 77: LATCbits.LATC4 = !f_state;
  2011  00EC  0020               	movlb	0	; select bank0
  2012  00ED  0833               	movf	setSwitch1State@f_state,w
  2013  00EE  0434               	iorwf	setSwitch1State@f_state+1,w
  2014  00EF  1D03               	btfss	3,2
  2015  00F0  28F4               	goto	u570
  2016  00F1  0022               	movlb	2	; select bank2
  2017  00F2  160E               	bsf	14,4	;volatile
  2018  00F3  28F6               	goto	l1131
  2019  00F4                     u570:	
  2020  00F4  0022               	movlb	2	; select bank2
  2021  00F5  120E               	bcf	14,4	;volatile
  2022  00F6                     l1131:	
  2023                           
  2024                           ;switch1.c: 79: wait_ms(20);
  2025  00F6  3014               	movlw	20
  2026  00F7  0020               	movlb	0	; select bank0
  2027  00F8  00AE               	movwf	wait_ms@time
  2028  00F9  3000               	movlw	0
  2029  00FA  00AF               	movwf	wait_ms@time+1
  2030  00FB  216F               	fcall	_wait_ms
  2031                           
  2032                           ;switch1.c: 81: LATCbits.LATC0 = 0;
  2033  00FC  0022               	movlb	2	; select bank2
  2034  00FD  100E               	bcf	14,0	;volatile
  2035                           
  2036                           ;switch1.c: 82: LATCbits.LATC4 = 0;
  2037  00FE  120E               	bcf	14,4	;volatile
  2038                           
  2039                           ;switch1.c: 84: updateSwitch1State(switch1_state);
  2040  00FF  0020               	movlb	0	; select bank0
  2041  0100  0838               	movf	_switch1_state+1,w
  2042  0101  00B2               	movwf	updateSwitch1State@state+1
  2043  0102  0837               	movf	_switch1_state,w
  2044  0103  00B1               	movwf	updateSwitch1State@state
  2045  0104  220D               	fcall	_updateSwitch1State
  2046                           
  2047                           ;switch1.c: 85: wait_ms(20);
  2048  0105  3014               	movlw	20
  2049  0106  0020               	movlb	0	; select bank0
  2050  0107  00AE               	movwf	wait_ms@time
  2051  0108  3000               	movlw	0
  2052  0109  00AF               	movwf	wait_ms@time+1
  2053  010A  216F               	fcall	_wait_ms
  2054  010B  0008               	return
  2055  010C                     __end_of_setSwitch1State:	
  2056                           
  2057                           	psect	text4
  2058  016F                     __ptext4:	
  2059 ;; *************** function _wait_ms *****************
  2060 ;; Defined at:
  2061 ;;		line 23 in file "system.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;  time            2    0[BANK0 ] unsigned int 
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2, status,0, pclath, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMMON   BANK0   BANK1
  2075 ;;      Params:         0       2       0
  2076 ;;      Locals:         0       0       0
  2077 ;;      Temps:          0       0       0
  2078 ;;      Totals:         0       2       0
  2079 ;;Total ram usage:        2 bytes
  2080 ;; Hardware stack levels used:    1
  2081 ;; Hardware stack levels required when called:    2
  2082 ;; This function calls:
  2083 ;;		___lmul
  2084 ;; This function is called by:
  2085 ;;		_setSwitch1State
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           
  2090                           ;psect for function _wait_ms
  2091  016F                     _wait_ms:	
  2092                           
  2093                           ;system.c: 25: static long timel = 0;
  2094                           ;system.c: 26: timel = time * 1000l;
  2095                           
  2096                           ;incstack = 0
  2097                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
  2098  016F  0020               	movlb	0	; select bank0
  2099  0170  082E               	movf	wait_ms@time,w
  2100  0171  00F1               	movwf	___lmul@multiplier
  2101  0172  082F               	movf	wait_ms@time+1,w
  2102  0173  00F2               	movwf	___lmul@multiplier+1
  2103  0174  01F3               	clrf	___lmul@multiplier+2
  2104  0175  01F4               	clrf	___lmul@multiplier+3
  2105  0176  3000               	movlw	0
  2106  0177  00F8               	movwf	___lmul@multiplicand+3
  2107  0178  3000               	movlw	0
  2108  0179  00F7               	movwf	___lmul@multiplicand+2
  2109  017A  3003               	movlw	3
  2110  017B  00F6               	movwf	___lmul@multiplicand+1
  2111  017C  30E8               	movlw	232
  2112  017D  00F5               	movwf	___lmul@multiplicand
  2113  017E  2140               	fcall	___lmul
  2114  017F  0874               	movf	?___lmul+3,w
  2115  0180  0020               	movlb	0	; select bank0
  2116  0181  00A3               	movwf	wait_ms@timel+3
  2117  0182  0873               	movf	?___lmul+2,w
  2118  0183  00A2               	movwf	wait_ms@timel+2
  2119  0184  0872               	movf	?___lmul+1,w
  2120  0185  00A1               	movwf	wait_ms@timel+1
  2121  0186  0871               	movf	?___lmul,w
  2122  0187  00A0               	movwf	wait_ms@timel
  2123  0188                     l67:	
  2124                           ;system.c: 27: for( ; timel; timel--);
  2125                           
  2126  0188  0823               	movf	wait_ms@timel+3,w
  2127  0189  0422               	iorwf	wait_ms@timel+2,w
  2128  018A  0421               	iorwf	wait_ms@timel+1,w
  2129  018B  0420               	iorwf	wait_ms@timel,w
  2130  018C  1903               	btfsc	3,2
  2131  018D  0008               	return
  2132  018E  30FF               	movlw	255
  2133  018F  07A0               	addwf	wait_ms@timel,f
  2134  0190  30FF               	movlw	255
  2135  0191  3DA1               	addwfc	wait_ms@timel+1,f
  2136  0192  30FF               	movlw	255
  2137  0193  3DA2               	addwfc	wait_ms@timel+2,f
  2138  0194  30FF               	movlw	255
  2139  0195  3DA3               	addwfc	wait_ms@timel+3,f
  2140  0196  2988               	goto	l67
  2141  0197                     __end_of_wait_ms:	
  2142                           
  2143                           	psect	text5
  2144  0140                     __ptext5:	
  2145 ;; *************** function ___lmul *****************
  2146 ;; Defined at:
  2147 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  multiplier      4    1[COMMON] unsigned long 
  2150 ;;  multiplicand    4    5[COMMON] unsigned long 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  product         4    9[COMMON] unsigned long 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  4    1[COMMON] unsigned long 
  2155 ;; Registers used:
  2156 ;;		wreg, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1
  2162 ;;      Params:         8       0       0
  2163 ;;      Locals:         4       0       0
  2164 ;;      Temps:          0       0       0
  2165 ;;      Totals:        12       0       0
  2166 ;;Total ram usage:       12 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    1
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_wait_ms
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           
  2177                           ;psect for function ___lmul
  2178  0140                     ___lmul:	
  2179                           
  2180                           ;incstack = 0
  2181                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2182  0140  3000               	movlw	0
  2183  0141  00FC               	movwf	___lmul@product+3
  2184  0142  3000               	movlw	0
  2185  0143  00FB               	movwf	___lmul@product+2
  2186  0144  3000               	movlw	0
  2187  0145  00FA               	movwf	___lmul@product+1
  2188  0146  3000               	movlw	0
  2189  0147  00F9               	movwf	___lmul@product
  2190  0148                     l1083:	
  2191  0148  1C71               	btfss	___lmul@multiplier,0
  2192  0149  2952               	goto	l1087
  2193  014A  0875               	movf	___lmul@multiplicand,w
  2194  014B  07F9               	addwf	___lmul@product,f
  2195  014C  0876               	movf	___lmul@multiplicand+1,w
  2196  014D  3DFA               	addwfc	___lmul@product+1,f
  2197  014E  0877               	movf	___lmul@multiplicand+2,w
  2198  014F  3DFB               	addwfc	___lmul@product+2,f
  2199  0150  0878               	movf	___lmul@multiplicand+3,w
  2200  0151  3DFC               	addwfc	___lmul@product+3,f
  2201  0152                     l1087:	
  2202  0152  3001               	movlw	1
  2203  0153                     u505:	
  2204  0153  35F5               	lslf	___lmul@multiplicand,f
  2205  0154  0DF6               	rlf	___lmul@multiplicand+1,f
  2206  0155  0DF7               	rlf	___lmul@multiplicand+2,f
  2207  0156  0DF8               	rlf	___lmul@multiplicand+3,f
  2208  0157  0B89               	decfsz	9,f
  2209  0158  2953               	goto	u505
  2210  0159  3001               	movlw	1
  2211  015A                     u515:	
  2212  015A  36F4               	lsrf	___lmul@multiplier+3,f
  2213  015B  0CF3               	rrf	___lmul@multiplier+2,f
  2214  015C  0CF2               	rrf	___lmul@multiplier+1,f
  2215  015D  0CF1               	rrf	___lmul@multiplier,f
  2216  015E  0B89               	decfsz	9,f
  2217  015F  295A               	goto	u515
  2218  0160  0874               	movf	___lmul@multiplier+3,w
  2219  0161  0473               	iorwf	___lmul@multiplier+2,w
  2220  0162  0472               	iorwf	___lmul@multiplier+1,w
  2221  0163  0471               	iorwf	___lmul@multiplier,w
  2222  0164  1D03               	skipz
  2223  0165  2948               	goto	l1083
  2224  0166  087C               	movf	___lmul@product+3,w
  2225  0167  00F4               	movwf	?___lmul+3
  2226  0168  087B               	movf	___lmul@product+2,w
  2227  0169  00F3               	movwf	?___lmul+2
  2228  016A  087A               	movf	___lmul@product+1,w
  2229  016B  00F2               	movwf	?___lmul+1
  2230  016C  0879               	movf	___lmul@product,w
  2231  016D  00F1               	movwf	?___lmul
  2232  016E  0008               	return
  2233  016F                     __end_of___lmul:	
  2234                           
  2235                           	psect	text6
  2236  020D                     __ptext6:	
  2237 ;; *************** function _updateSwitch1State *****************
  2238 ;; Defined at:
  2239 ;;		line 48 in file "state_manager.c"
  2240 ;; Parameters:    Size  Location     Type
  2241 ;;  state           2    3[BANK0 ] int 
  2242 ;; Auto vars:     Size  Location     Type
  2243 ;;		None
  2244 ;; Return value:  Size  Location     Type
  2245 ;;                  1    wreg      void 
  2246 ;; Registers used:
  2247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2248 ;; Tracked objects:
  2249 ;;		On entry : 0/0
  2250 ;;		On exit  : 0/0
  2251 ;;		Unchanged: 0/0
  2252 ;; Data sizes:     COMMON   BANK0   BANK1
  2253 ;;      Params:         0       2       0
  2254 ;;      Locals:         0       0       0
  2255 ;;      Temps:          0       0       0
  2256 ;;      Totals:         0       2       0
  2257 ;;Total ram usage:        2 bytes
  2258 ;; Hardware stack levels used:    1
  2259 ;; Hardware stack levels required when called:    4
  2260 ;; This function calls:
  2261 ;;		_saveState
  2262 ;; This function is called by:
  2263 ;;		_setSwitch1State
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           
  2268                           ;psect for function _updateSwitch1State
  2269  020D                     _updateSwitch1State:	
  2270                           
  2271                           ;state_manager.c: 49: if (state != 1) {state = 0;}
  2272                           
  2273                           ;incstack = 0
  2274                           ; Regs used in _updateSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2275  020D  0020               	movlb	0	; select bank0
  2276  020E  0331               	decf	updateSwitch1State@state,w
  2277  020F  0432               	iorwf	updateSwitch1State@state+1,w
  2278  0210  1903               	btfsc	3,2
  2279  0211  2A14               	goto	l1107
  2280  0212  01B1               	clrf	updateSwitch1State@state
  2281  0213  01B2               	clrf	updateSwitch1State@state+1
  2282  0214                     l1107:	
  2283                           
  2284                           ;state_manager.c: 51: pedalState.switch1 = state;
  2285  0214  0832               	movf	updateSwitch1State@state+1,w
  2286  0215  00AB               	movwf	_pedalState+1
  2287  0216  0831               	movf	updateSwitch1State@state,w
  2288  0217  00AA               	movwf	_pedalState
  2289                           
  2290                           ;state_manager.c: 52: saveState();
  2291  0218  21FD               	fcall	_saveState
  2292  0219  0008               	return
  2293  021A                     __end_of_updateSwitch1State:	
  2294                           
  2295                           	psect	text7
  2296  01FD                     __ptext7:	
  2297 ;; *************** function _saveState *****************
  2298 ;; Defined at:
  2299 ;;		line 55 in file "state_manager.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  r               1   12[COMMON] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1
  2313 ;;      Params:         0       0       0
  2314 ;;      Locals:         1       0       0
  2315 ;;      Temps:          0       3       0
  2316 ;;      Totals:         1       3       0
  2317 ;;Total ram usage:        4 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    3
  2320 ;; This function calls:
  2321 ;;		_HEF_ByteArrayWrite
  2322 ;; This function is called by:
  2323 ;;		_updateSwitch1State
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _saveState
  2329  01FD                     _saveState:	
  2330                           
  2331                           ;state_manager.c: 56: uint8_t r;
  2332                           ;state_manager.c: 57: r = HEF_ByteArrayWrite(1, (void *) &pedalState, sizeof (pedalState
      +                          ));
  2333                           
  2334                           ;incstack = 0
  2335                           ; Regs used in _saveState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2336  01FD  302A               	movlw	(low (_pedalState| 0))& (0+255)
  2337  01FE  0020               	movlb	0	; select bank0
  2338  01FF  00AE               	movwf	??_saveState
  2339  0200  082E               	movf	??_saveState,w
  2340  0201  00F4               	movwf	HEF_ByteArrayWrite@byteArray
  2341  0202  3004               	movlw	4
  2342  0203  00AF               	movwf	??_saveState+1
  2343  0204  082F               	movf	??_saveState+1,w
  2344  0205  00F5               	movwf	HEF_ByteArrayWrite@count
  2345  0206  3001               	movlw	1
  2346  0207  207F               	fcall	_HEF_ByteArrayWrite
  2347  0208  0020               	movlb	0	; select bank0
  2348  0209  00B0               	movwf	??_saveState+2
  2349  020A  0830               	movf	??_saveState+2,w
  2350  020B  00FC               	movwf	saveState@r
  2351  020C  0008               	return
  2352  020D                     __end_of_saveState:	
  2353                           
  2354                           	psect	text8
  2355  007F                     __ptext8:	
  2356 ;; *************** function _HEF_ByteArrayWrite *****************
  2357 ;; Defined at:
  2358 ;;		line 12 in file "HEF.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  block           1    wreg     unsigned char 
  2361 ;;  byteArray       1    4[COMMON] PTR unsigned char 
  2362 ;;		 -> pedalState(4), 
  2363 ;;  count           1    5[COMMON] unsigned char 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  block           1    9[COMMON] unsigned char 
  2366 ;;  blockAddr       2   10[COMMON] unsigned int 
  2367 ;;  GIEBitValue     1    8[COMMON] unsigned char 
  2368 ;;  i               1    0        unsigned char 
  2369 ;; Return value:  Size  Location     Type
  2370 ;;                  1    wreg      char 
  2371 ;; Registers used:
  2372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2373 ;; Tracked objects:
  2374 ;;		On entry : 0/0
  2375 ;;		On exit  : 0/0
  2376 ;;		Unchanged: 0/0
  2377 ;; Data sizes:     COMMON   BANK0   BANK1
  2378 ;;      Params:         2       0       0
  2379 ;;      Locals:         4       0       0
  2380 ;;      Temps:          2       0       0
  2381 ;;      Totals:         8       0       0
  2382 ;;Total ram usage:        8 bytes
  2383 ;; Hardware stack levels used:    1
  2384 ;; Hardware stack levels required when called:    2
  2385 ;; This function calls:
  2386 ;;		_FLASH_EraseBlock
  2387 ;; This function is called by:
  2388 ;;		_saveState
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           
  2393                           ;psect for function _HEF_ByteArrayWrite
  2394  007F                     _HEF_ByteArrayWrite:	
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in _HEF_ByteArrayWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2398                           ;HEF_ByteArrayWrite@block stored from wreg
  2399  007F  00F9               	movwf	HEF_ByteArrayWrite@block
  2400                           
  2401                           ;HEF.c: 13: uint16_t blockAddr;
  2402                           ;HEF.c: 14: uint8_t GIEBitValue = INTCONbits.GIE;
  2403  0080  3000               	movlw	0
  2404  0081  1B8B               	btfsc	11,7	;volatile
  2405  0082  3001               	movlw	1
  2406  0083  00F8               	movwf	HEF_ByteArrayWrite@GIEBitValue
  2407                           
  2408                           ;HEF.c: 15: uint8_t i;
  2409                           ;HEF.c: 17: if ( ( block >= 128 / 32) || ( count > 32))
  2410  0084  3004               	movlw	4
  2411  0085  0279               	subwf	HEF_ByteArrayWrite@block,w
  2412  0086  1803               	skipnc
  2413  0087  288C               	goto	l997
  2414  0088  3021               	movlw	33
  2415  0089  0275               	subwf	HEF_ByteArrayWrite@count,w
  2416  008A  1C03               	skipc
  2417  008B  288E               	goto	l1001
  2418  008C                     l997:	
  2419                           
  2420                           ;HEF.c: 18: return -1;
  2421  008C  30FF               	movlw	255
  2422  008D  0008               	return
  2423  008E                     l1001:	
  2424                           
  2425                           ;HEF.c: 20: blockAddr = 16384 - 128 + block * 32;
  2426  008E  0879               	movf	HEF_ByteArrayWrite@block,w
  2427  008F  00F6               	movwf	??_HEF_ByteArrayWrite
  2428  0090  01F7               	clrf	??_HEF_ByteArrayWrite+1
  2429  0091  3005               	movlw	5
  2430  0092                     u405:	
  2431  0092  35F6               	lslf	??_HEF_ByteArrayWrite,f
  2432  0093  0DF7               	rlf	??_HEF_ByteArrayWrite+1,f
  2433  0094  0B89               	decfsz	9,f
  2434  0095  2892               	goto	u405
  2435  0096  0876               	movf	??_HEF_ByteArrayWrite,w
  2436  0097  3E80               	addlw	128
  2437  0098  00FA               	movwf	HEF_ByteArrayWrite@blockAddr
  2438  0099  303F               	movlw	63
  2439  009A  3D77               	addwfc	??_HEF_ByteArrayWrite+1,w
  2440  009B  00FB               	movwf	HEF_ByteArrayWrite@blockAddr+1
  2441                           
  2442                           ;HEF.c: 21: INTCONbits.GIE = 0;
  2443  009C  138B               	bcf	11,7	;volatile
  2444                           
  2445                           ;HEF.c: 23: FLASH_EraseBlock( blockAddr);
  2446  009D  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  2447  009E  00F2               	movwf	FLASH_EraseBlock@startAddr+1
  2448  009F  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  2449  00A0  00F1               	movwf	FLASH_EraseBlock@startAddr
  2450  00A1  2197               	fcall	_FLASH_EraseBlock
  2451                           
  2452                           ;HEF.c: 26: PMCON1bits.CFGS = 0;
  2453  00A2  0023               	movlb	3	; select bank3
  2454  00A3  1315               	bcf	21,6	;volatile
  2455                           
  2456                           ;HEF.c: 27: PMCON1bits.WREN = 1;
  2457  00A4  1515               	bsf	21,2	;volatile
  2458                           
  2459                           ;HEF.c: 28: PMCON1bits.LWLO = 1;
  2460  00A5  1695               	bsf	21,5	;volatile
  2461  00A6                     l1035:	
  2462                           ;HEF.c: 30: while ( count > 0) {
  2463                           
  2464  00A6  0875               	movf	HEF_ByteArrayWrite@count,w
  2465  00A7  1903               	btfsc	3,2
  2466  00A8  28C9               	goto	l137
  2467                           
  2468                           ;HEF.c: 31: PMADR = blockAddr++;
  2469  00A9  087B               	movf	HEF_ByteArrayWrite@blockAddr+1,w
  2470  00AA  0023               	movlb	3	; select bank3
  2471  00AB  0092               	movwf	18	;volatile
  2472  00AC  087A               	movf	HEF_ByteArrayWrite@blockAddr,w
  2473  00AD  0091               	movwf	17	;volatile
  2474  00AE  3001               	movlw	1
  2475  00AF  07FA               	addwf	HEF_ByteArrayWrite@blockAddr,f
  2476  00B0  3000               	movlw	0
  2477  00B1  3DFB               	addwfc	HEF_ByteArrayWrite@blockAddr+1,f
  2478                           
  2479                           ;HEF.c: 33: PMDATL = *byteArray++;
  2480  00B2  0874               	movf	HEF_ByteArrayWrite@byteArray,w
  2481  00B3  0086               	movwf	6
  2482  00B4  0187               	clrf	7
  2483  00B5  0801               	movf	1,w
  2484  00B6  0093               	movwf	19	;volatile
  2485  00B7  3001               	movlw	1
  2486  00B8  00F6               	movwf	??_HEF_ByteArrayWrite
  2487  00B9  0876               	movf	??_HEF_ByteArrayWrite,w
  2488  00BA  07F4               	addwf	HEF_ByteArrayWrite@byteArray,f
  2489                           
  2490                           ;HEF.c: 34: PMDATH = 0;
  2491  00BB  0194               	clrf	20	;volatile
  2492                           
  2493                           ;HEF.c: 35: if ( count == 1) {
  2494  00BC  0375               	decf	HEF_ByteArrayWrite@count,w
  2495  00BD  1903               	btfsc	3,2
  2496                           
  2497                           ;HEF.c: 36: PMCON1bits.LWLO = 0;
  2498  00BE  1295               	bcf	21,5	;volatile
  2499                           
  2500                           ;HEF.c: 37: }
  2501                           ;HEF.c: 39: PMCON2 = 0x55;
  2502  00BF  3055               	movlw	85
  2503  00C0  0096               	movwf	22	;volsfr
  2504                           
  2505                           ;HEF.c: 40: PMCON2 = 0xAA;
  2506  00C1  30AA               	movlw	170
  2507  00C2  0096               	movwf	22	;volsfr
  2508                           
  2509                           ;HEF.c: 41: PMCON1bits.WR = 1;
  2510  00C3  1495               	bsf	21,1	;volatile
  2511                           
  2512                           ;HEF.c: 42: __nop();
  2513  00C4  0000               	nop
  2514                           
  2515                           ;HEF.c: 43: __nop();
  2516  00C5  0000               	nop
  2517                           
  2518                           ;HEF.c: 44: count--;
  2519  00C6  3001               	movlw	1
  2520  00C7  02F5               	subwf	HEF_ByteArrayWrite@count,f
  2521  00C8  28A6               	goto	l1035
  2522  00C9                     l137:	
  2523                           
  2524                           ;HEF.c: 45: }
  2525                           ;HEF.c: 47: PMCON1bits.WREN = 0;
  2526  00C9  0023               	movlb	3	; select bank3
  2527  00CA  1115               	bcf	21,2	;volatile
  2528                           
  2529                           ;HEF.c: 48: INTCONbits.GIE = GIEBitValue;
  2530  00CB  0C78               	rrf	HEF_ByteArrayWrite@GIEBitValue,w
  2531  00CC  1C03               	skipc
  2532  00CD  138B               	bcf	11,7	;volatile
  2533  00CE  1803               	skipnc
  2534  00CF  178B               	bsf	11,7	;volatile
  2535                           
  2536                           ;HEF.c: 50: return 0;
  2537  00D0  3000               	movlw	0
  2538  00D1  0008               	return
  2539  00D2                     __end_of_HEF_ByteArrayWrite:	
  2540                           
  2541                           	psect	text9
  2542  0197                     __ptext9:	
  2543 ;; *************** function _FLASH_EraseBlock *****************
  2544 ;; Defined at:
  2545 ;;		line 141 in file "mcc_generated_files/memory.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  startAddr       2    1[COMMON] unsigned int 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1
  2559 ;;      Params:         2       0       0
  2560 ;;      Locals:         1       0       0
  2561 ;;      Temps:          0       0       0
  2562 ;;      Totals:         3       0       0
  2563 ;;Total ram usage:        3 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    1
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		_HEF_ByteArrayWrite
  2570 ;;		_FLASH_WriteBlock
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           
  2575                           ;psect for function _FLASH_EraseBlock
  2576  0197                     _FLASH_EraseBlock:	
  2577                           
  2578                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  2579                           
  2580                           ;incstack = 0
  2581                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  2582  0197  3000               	movlw	0
  2583  0198  1B8B               	btfsc	11,7	;volatile
  2584  0199  3001               	movlw	1
  2585  019A  00F3               	movwf	FLASH_EraseBlock@GIEBitValue
  2586                           
  2587                           ;memory.c: 145: INTCONbits.GIE = 0;
  2588  019B  138B               	bcf	11,7	;volatile
  2589                           
  2590                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  2591  019C  0871               	movf	FLASH_EraseBlock@startAddr,w
  2592  019D  0023               	movlb	3	; select bank3
  2593  019E  0091               	movwf	17	;volatile
  2594                           
  2595                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  2596  019F  0872               	movf	FLASH_EraseBlock@startAddr+1,w
  2597  01A0  0092               	movwf	18	;volatile
  2598                           
  2599                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  2600  01A1  1315               	bcf	21,6	;volatile
  2601                           
  2602                           ;memory.c: 153: PMCON1bits.FREE = 1;
  2603  01A2  1615               	bsf	21,4	;volatile
  2604                           
  2605                           ;memory.c: 154: PMCON1bits.WREN = 1;
  2606  01A3  1515               	bsf	21,2	;volatile
  2607                           
  2608                           ;memory.c: 157: PMCON2 = 0x55;
  2609  01A4  3055               	movlw	85
  2610  01A5  0096               	movwf	22	;volsfr
  2611                           
  2612                           ;memory.c: 158: PMCON2 = 0xAA;
  2613  01A6  30AA               	movlw	170
  2614  01A7  0096               	movwf	22	;volsfr
  2615                           
  2616                           ;memory.c: 159: PMCON1bits.WR = 1;
  2617  01A8  1495               	bsf	21,1	;volatile
  2618                           
  2619                           ;memory.c: 160: __nop();
  2620  01A9  0000               	nop
  2621                           
  2622                           ;memory.c: 161: __nop();
  2623  01AA  0000               	nop
  2624                           
  2625                           ;memory.c: 163: PMCON1bits.WREN = 0;
  2626  01AB  0023               	movlb	3	; select bank3
  2627  01AC  1115               	bcf	21,2	;volatile
  2628                           
  2629                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  2630  01AD  0C73               	rrf	FLASH_EraseBlock@GIEBitValue,w
  2631  01AE  1C03               	skipc
  2632  01AF  138B               	bcf	11,7	;volatile
  2633  01B0  1803               	skipnc
  2634  01B1  178B               	bsf	11,7	;volatile
  2635  01B2  0008               	return
  2636  01B3                     __end_of_FLASH_EraseBlock:	
  2637                           
  2638                           	psect	text10
  2639  0226                     __ptext10:	
  2640 ;; *************** function _getSwitch1State *****************
  2641 ;; Defined at:
  2642 ;;		line 40 in file "state_manager.c"
  2643 ;; Parameters:    Size  Location     Type
  2644 ;;		None
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;		None
  2647 ;; Return value:  Size  Location     Type
  2648 ;;                  2    1[BANK0 ] int 
  2649 ;; Registers used:
  2650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2651 ;; Tracked objects:
  2652 ;;		On entry : 0/0
  2653 ;;		On exit  : 0/0
  2654 ;;		Unchanged: 0/0
  2655 ;; Data sizes:     COMMON   BANK0   BANK1
  2656 ;;      Params:         0       2       0
  2657 ;;      Locals:         0       0       0
  2658 ;;      Temps:          0       0       0
  2659 ;;      Totals:         0       2       0
  2660 ;;Total ram usage:        2 bytes
  2661 ;; Hardware stack levels used:    1
  2662 ;; Hardware stack levels required when called:    5
  2663 ;; This function calls:
  2664 ;;		_initStateManager
  2665 ;; This function is called by:
  2666 ;;		_initSwitch1
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           
  2671                           ;psect for function _getSwitch1State
  2672  0226                     _getSwitch1State:	
  2673                           
  2674                           ;state_manager.c: 41: if (!isInitialized) {
  2675                           
  2676                           ;incstack = 0
  2677                           ; Regs used in _getSwitch1State: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2678  0226  0020               	movlb	0	; select bank0
  2679  0227  0824               	movf	_isInitialized,w
  2680  0228  0425               	iorwf	_isInitialized+1,w
  2681  0229  1D03               	btfss	3,2
  2682  022A  2A2C               	goto	l1115
  2683                           
  2684                           ;state_manager.c: 42: initStateManager();
  2685  022B  2247               	fcall	_initStateManager
  2686  022C                     l1115:	
  2687                           
  2688                           ;state_manager.c: 43: }
  2689                           ;state_manager.c: 44: return pedalState.switch1;
  2690  022C  0020               	movlb	0	; select bank0
  2691  022D  082B               	movf	_pedalState+1,w
  2692  022E  00B0               	movwf	?_getSwitch1State+1
  2693  022F  082A               	movf	_pedalState,w
  2694  0230  00AF               	movwf	?_getSwitch1State
  2695  0231  0008               	return
  2696  0232                     __end_of_getSwitch1State:	
  2697                           
  2698                           	psect	text11
  2699  0247                     __ptext11:	
  2700 ;; *************** function _initStateManager *****************
  2701 ;; Defined at:
  2702 ;;		line 18 in file "state_manager.c"
  2703 ;; Parameters:    Size  Location     Type
  2704 ;;		None
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;		None
  2707 ;; Return value:  Size  Location     Type
  2708 ;;                  1    wreg      void 
  2709 ;; Registers used:
  2710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/0
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: 0/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1
  2716 ;;      Params:         0       0       0
  2717 ;;      Locals:         0       0       0
  2718 ;;      Temps:          0       0       0
  2719 ;;      Totals:         0       0       0
  2720 ;;Total ram usage:        0 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    4
  2723 ;; This function calls:
  2724 ;;		_getCurrentState
  2725 ;; This function is called by:
  2726 ;;		_getSwitch1State
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729                           
  2730                           
  2731                           ;psect for function _initStateManager
  2732  0247                     _initStateManager:	
  2733                           
  2734                           ;state_manager.c: 19: isInitialized = 0;
  2735                           
  2736                           ;incstack = 0
  2737                           ; Regs used in _initStateManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2738  0247  0020               	movlb	0	; select bank0
  2739  0248  01A4               	clrf	_isInitialized
  2740  0249  01A5               	clrf	_isInitialized+1
  2741                           
  2742                           ;state_manager.c: 20: getCurrentState();
  2743  024A  21B3               	fcall	_getCurrentState
  2744  024B  0008               	return
  2745  024C                     __end_of_initStateManager:	
  2746                           
  2747                           	psect	text12
  2748  01B3                     __ptext12:	
  2749 ;; *************** function _getCurrentState *****************
  2750 ;; Defined at:
  2751 ;;		line 23 in file "state_manager.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;		None
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;  r               1    0[BANK0 ] unsigned char 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  4  151[None  ] struct .
  2758 ;; Registers used:
  2759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMMON   BANK0   BANK1
  2765 ;;      Params:         0       0       0
  2766 ;;      Locals:         0       1       0
  2767 ;;      Temps:          2       0       0
  2768 ;;      Totals:         2       1       0
  2769 ;;Total ram usage:        3 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:    3
  2772 ;; This function calls:
  2773 ;;		_HEF_ByteArrayRead
  2774 ;; This function is called by:
  2775 ;;		_initStateManager
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _getCurrentState
  2781  01B3                     _getCurrentState:	
  2782                           
  2783                           ;state_manager.c: 24: if (!isInitialized) {
  2784                           
  2785                           ;incstack = 0
  2786                           ; Regs used in _getCurrentState: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2787  01B3  0020               	movlb	0	; select bank0
  2788  01B4  0824               	movf	_isInitialized,w
  2789  01B5  0425               	iorwf	_isInitialized+1,w
  2790  01B6  1D03               	btfss	3,2
  2791  01B7  0008               	return
  2792                           
  2793                           ;state_manager.c: 25: uint8_t r;
  2794                           ;state_manager.c: 28: r = HEF_ByteArrayRead((void *) &pedalState, 1, sizeof (pedalState)
      +                          );
  2795  01B8  01F4               	clrf	HEF_ByteArrayRead@block
  2796  01B9  0AF4               	incf	HEF_ByteArrayRead@block,f
  2797  01BA  3004               	movlw	4
  2798  01BB  00FB               	movwf	??_getCurrentState
  2799  01BC  087B               	movf	??_getCurrentState,w
  2800  01BD  00F5               	movwf	HEF_ByteArrayRead@count
  2801  01BE  302A               	movlw	(low (_pedalState| 0))& (0+255)
  2802  01BF  210C               	fcall	_HEF_ByteArrayRead
  2803  01C0  00FC               	movwf	??_getCurrentState+1
  2804  01C1  087C               	movf	??_getCurrentState+1,w
  2805  01C2  0020               	movlb	0	; select bank0
  2806  01C3  00AE               	movwf	getCurrentState@r
  2807                           
  2808                           ;state_manager.c: 30: if (pedalState.switch1 != 1) {
  2809  01C4  032A               	decf	_pedalState,w
  2810  01C5  042B               	iorwf	_pedalState+1,w
  2811  01C6  1903               	btfsc	3,2
  2812  01C7  29CA               	goto	l1075
  2813                           
  2814                           ;state_manager.c: 31: pedalState.switch1 = 0;
  2815  01C8  01AA               	clrf	_pedalState
  2816  01C9  01AB               	clrf	_pedalState+1
  2817  01CA                     l1075:	
  2818                           
  2819                           ;state_manager.c: 32: }
  2820                           ;state_manager.c: 34: isInitialized = 1;
  2821  01CA  3001               	movlw	1
  2822  01CB  00A4               	movwf	_isInitialized
  2823  01CC  3000               	movlw	0
  2824  01CD  00A5               	movwf	_isInitialized+1
  2825  01CE  0008               	return
  2826  01CF                     __end_of_getCurrentState:	
  2827                           ;state_manager.c: 35: }
  2828                           ;state_manager.c: 36: return pedalState;
  2829                           ;	Return value of _getCurrentState is never used
  2830                           
  2831                           
  2832                           	psect	text13
  2833  010C                     __ptext13:	
  2834 ;; *************** function _HEF_ByteArrayRead *****************
  2835 ;; Defined at:
  2836 ;;		line 53 in file "HEF.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  bArray          1    wreg     PTR unsigned char 
  2839 ;;		 -> pedalState(4), 
  2840 ;;  block           1    4[COMMON] unsigned char 
  2841 ;;  count           1    5[COMMON] unsigned char 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  bArray          1   10[COMMON] PTR unsigned char 
  2844 ;;		 -> pedalState(4), 
  2845 ;;  wordAdd         2    8[COMMON] unsigned int 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      char 
  2848 ;; Registers used:
  2849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1
  2855 ;;      Params:         2       0       0
  2856 ;;      Locals:         3       0       0
  2857 ;;      Temps:          2       0       0
  2858 ;;      Totals:         7       0       0
  2859 ;;Total ram usage:        7 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    2
  2862 ;; This function calls:
  2863 ;;		_FLASH_ReadWord
  2864 ;; This function is called by:
  2865 ;;		_getCurrentState
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           
  2870                           ;psect for function _HEF_ByteArrayRead
  2871  010C                     _HEF_ByteArrayRead:	
  2872                           
  2873                           ;incstack = 0
  2874                           ; Regs used in _HEF_ByteArrayRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2875                           ;HEF_ByteArrayRead@bArray stored from wreg
  2876  010C  00FA               	movwf	HEF_ByteArrayRead@bArray
  2877                           
  2878                           ;HEF.c: 56: uint16_t wordAdd = block * 32 + 16384 - 128;
  2879  010D  0874               	movf	HEF_ByteArrayRead@block,w
  2880  010E  00F6               	movwf	??_HEF_ByteArrayRead
  2881  010F  01F7               	clrf	??_HEF_ByteArrayRead+1
  2882  0110  3005               	movlw	5
  2883  0111                     u435:	
  2884  0111  35F6               	lslf	??_HEF_ByteArrayRead,f
  2885  0112  0DF7               	rlf	??_HEF_ByteArrayRead+1,f
  2886  0113  0B89               	decfsz	9,f
  2887  0114  2911               	goto	u435
  2888  0115  0876               	movf	??_HEF_ByteArrayRead,w
  2889  0116  3E80               	addlw	128
  2890  0117  00F8               	movwf	HEF_ByteArrayRead@wordAdd
  2891  0118  303F               	movlw	63
  2892  0119  3D77               	addwfc	??_HEF_ByteArrayRead+1,w
  2893  011A  00F9               	movwf	HEF_ByteArrayRead@wordAdd+1
  2894                           
  2895                           ;HEF.c: 59: if ( ( count > 32) || ( block >= 128 / 32))
  2896  011B  3021               	movlw	33
  2897  011C  0275               	subwf	HEF_ByteArrayRead@count,w
  2898  011D  1803               	skipnc
  2899  011E  2923               	goto	l1049
  2900  011F  3004               	movlw	4
  2901  0120  0274               	subwf	HEF_ByteArrayRead@block,w
  2902  0121  1C03               	skipc
  2903  0122  293B               	goto	l1061
  2904  0123                     l1049:	
  2905                           
  2906                           ;HEF.c: 60: return -1;
  2907  0123  30FF               	movlw	255
  2908  0124  0008               	return
  2909  0125                     l1053:	
  2910                           ;HEF.c: 63: while ( count > 0)
  2911                           
  2912                           
  2913                           ;HEF.c: 64: {
  2914                           ;HEF.c: 65: *bArray++ = (uint8_t) FLASH_ReadWord( wordAdd++);
  2915  0125  0879               	movf	HEF_ByteArrayRead@wordAdd+1,w
  2916  0126  00F2               	movwf	FLASH_ReadWord@flashAddr+1
  2917  0127  0878               	movf	HEF_ByteArrayRead@wordAdd,w
  2918  0128  00F1               	movwf	FLASH_ReadWord@flashAddr
  2919  0129  21CF               	fcall	_FLASH_ReadWord
  2920  012A  0871               	movf	?_FLASH_ReadWord,w
  2921  012B  00F6               	movwf	??_HEF_ByteArrayRead
  2922  012C  087A               	movf	HEF_ByteArrayRead@bArray,w
  2923  012D  0086               	movwf	6
  2924  012E  0187               	clrf	7
  2925  012F  0876               	movf	??_HEF_ByteArrayRead,w
  2926  0130  0081               	movwf	1
  2927  0131  3001               	movlw	1
  2928  0132  07F8               	addwf	HEF_ByteArrayRead@wordAdd,f
  2929  0133  3000               	movlw	0
  2930  0134  3DF9               	addwfc	HEF_ByteArrayRead@wordAdd+1,f
  2931  0135  3001               	movlw	1
  2932  0136  00F6               	movwf	??_HEF_ByteArrayRead
  2933  0137  0876               	movf	??_HEF_ByteArrayRead,w
  2934  0138  07FA               	addwf	HEF_ByteArrayRead@bArray,f
  2935                           
  2936                           ;HEF.c: 66: count--;
  2937  0139  3001               	movlw	1
  2938  013A  02F5               	subwf	HEF_ByteArrayRead@count,f
  2939  013B                     l1061:	
  2940  013B  0875               	movf	HEF_ByteArrayRead@count,w
  2941  013C  1D03               	btfss	3,2
  2942  013D  2925               	goto	l1053
  2943                           
  2944                           ;HEF.c: 67: }
  2945                           ;HEF.c: 70: return 0;
  2946  013E  3000               	movlw	0
  2947  013F  0008               	return
  2948  0140                     __end_of_HEF_ByteArrayRead:	
  2949                           
  2950                           	psect	text14
  2951  01CF                     __ptext14:	
  2952 ;; *************** function _FLASH_ReadWord *****************
  2953 ;; Defined at:
  2954 ;;		line 58 in file "mcc_generated_files/memory.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  flashAddr       2    1[COMMON] unsigned int 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  GIEBitValue     1    3[COMMON] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  2    1[COMMON] unsigned int 
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMMON   BANK0   BANK1
  2968 ;;      Params:         2       0       0
  2969 ;;      Locals:         1       0       0
  2970 ;;      Temps:          0       0       0
  2971 ;;      Totals:         3       0       0
  2972 ;;Total ram usage:        3 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    1
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_HEF_ByteArrayRead
  2979 ;;		_FLASH_WriteWord
  2980 ;;		_HEF_ByteRead
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           
  2985                           ;psect for function _FLASH_ReadWord
  2986  01CF                     _FLASH_ReadWord:	
  2987                           
  2988                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
  2989                           
  2990                           ;incstack = 0
  2991                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  2992  01CF  3000               	movlw	0
  2993  01D0  1B8B               	btfsc	11,7	;volatile
  2994  01D1  3001               	movlw	1
  2995  01D2  00F3               	movwf	FLASH_ReadWord@GIEBitValue
  2996                           
  2997                           ;memory.c: 61: INTCONbits.GIE = 0;
  2998  01D3  138B               	bcf	11,7	;volatile
  2999                           
  3000                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
  3001  01D4  0871               	movf	FLASH_ReadWord@flashAddr,w
  3002  01D5  0023               	movlb	3	; select bank3
  3003  01D6  0091               	movwf	17	;volatile
  3004                           
  3005                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
  3006  01D7  0872               	movf	FLASH_ReadWord@flashAddr+1,w
  3007  01D8  0092               	movwf	18	;volatile
  3008                           
  3009                           ;memory.c: 65: PMCON1bits.CFGS = 0;
  3010  01D9  1315               	bcf	21,6	;volatile
  3011                           
  3012                           ;memory.c: 66: PMCON1bits.RD = 1;
  3013  01DA  1415               	bsf	21,0	;volatile
  3014                           
  3015                           ;memory.c: 67: __nop();
  3016  01DB  0000               	nop
  3017                           
  3018                           ;memory.c: 68: __nop();
  3019  01DC  0000               	nop
  3020                           
  3021                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
  3022  01DD  0C73               	rrf	FLASH_ReadWord@GIEBitValue,w
  3023  01DE  1C03               	skipc
  3024  01DF  138B               	bcf	11,7	;volatile
  3025  01E0  1803               	skipnc
  3026  01E1  178B               	bsf	11,7	;volatile
  3027                           
  3028                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
  3029  01E2  0023               	movlb	3	; select bank3
  3030  01E3  0814               	movf	20,w	;volatile
  3031  01E4  00F2               	movwf	?_FLASH_ReadWord+1
  3032  01E5  0813               	movf	19,w	;volatile
  3033  01E6  00F1               	movwf	?_FLASH_ReadWord
  3034  01E7  0008               	return
  3035  01E8                     __end_of_FLASH_ReadWord:	
  3036                           
  3037                           	psect	text15
  3038  01E8                     __ptext15:	
  3039 ;; *************** function _InitApp *****************
  3040 ;; Defined at:
  3041 ;;		line 27 in file "user.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, status,0, pclath, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMMON   BANK0   BANK1
  3055 ;;      Params:         0       0       0
  3056 ;;      Locals:         0       0       0
  3057 ;;      Temps:          0       0       0
  3058 ;;      Totals:         0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    2
  3062 ;; This function calls:
  3063 ;;		_init_adc
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _InitApp
  3071  01E8                     _InitApp:	
  3072                           
  3073                           ;user.c: 28: TRISAbits.TRISA0 = 0;
  3074                           
  3075                           ;incstack = 0
  3076                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
  3077  01E8  0021               	movlb	1	; select bank1
  3078  01E9  100C               	bcf	12,0	;volatile
  3079                           
  3080                           ;user.c: 29: TRISAbits.TRISA1 = 0;
  3081  01EA  108C               	bcf	12,1	;volatile
  3082                           
  3083                           ;user.c: 31: TRISAbits.TRISA2 = 0;
  3084  01EB  110C               	bcf	12,2	;volatile
  3085                           
  3086                           ;user.c: 32: TRISAbits.TRISA4 = 1;
  3087  01EC  160C               	bsf	12,4	;volatile
  3088                           
  3089                           ;user.c: 33: TRISAbits.TRISA5 = 1;
  3090  01ED  168C               	bsf	12,5	;volatile
  3091                           
  3092                           ;user.c: 34: ANSELAbits.ANSA4 = 0;
  3093  01EE  0023               	movlb	3	; select bank3
  3094  01EF  120C               	bcf	12,4	;volatile
  3095                           
  3096                           ;user.c: 36: TRISCbits.TRISC0 = 0;
  3097  01F0  0021               	movlb	1	; select bank1
  3098  01F1  100E               	bcf	14,0	;volatile
  3099                           
  3100                           ;user.c: 37: TRISCbits.TRISC1 = 0;
  3101  01F2  108E               	bcf	14,1	;volatile
  3102                           
  3103                           ;user.c: 38: TRISCbits.TRISC2 = 0;
  3104  01F3  110E               	bcf	14,2	;volatile
  3105                           
  3106                           ;user.c: 39: TRISCbits.TRISC3 = 0;
  3107  01F4  118E               	bcf	14,3	;volatile
  3108                           
  3109                           ;user.c: 40: TRISCbits.TRISC4 = 0;
  3110  01F5  120E               	bcf	14,4	;volatile
  3111                           
  3112                           ;user.c: 41: TRISCbits.TRISC5 = 0;
  3113  01F6  128E               	bcf	14,5	;volatile
  3114                           
  3115                           ;user.c: 43: LATCbits.LATC5 = 0;
  3116  01F7  0022               	movlb	2	; select bank2
  3117  01F8  128E               	bcf	14,5	;volatile
  3118                           
  3119                           ;user.c: 45: LATAbits.LATA2 = 0;
  3120  01F9  110C               	bcf	12,2	;volatile
  3121                           
  3122                           ;user.c: 46: LATCbits.LATC3 = 0;
  3123  01FA  118E               	bcf	14,3	;volatile
  3124                           
  3125                           ;user.c: 48: init_adc();
  3126  01FB  2232               	fcall	_init_adc
  3127  01FC  0008               	return
  3128  01FD                     __end_of_InitApp:	
  3129                           
  3130                           	psect	text16
  3131  0232                     __ptext16:	
  3132 ;; *************** function _init_adc *****************
  3133 ;; Defined at:
  3134 ;;		line 60 in file "user.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;		None
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;                  1    wreg      void 
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMMON   BANK0   BANK1
  3148 ;;      Params:         0       0       0
  3149 ;;      Locals:         0       0       0
  3150 ;;      Temps:          0       0       0
  3151 ;;      Totals:         0       0       0
  3152 ;;Total ram usage:        0 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    1
  3155 ;; This function calls:
  3156 ;;		Nothing
  3157 ;; This function is called by:
  3158 ;;		_InitApp
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           
  3163                           ;psect for function _init_adc
  3164  0232                     _init_adc:	
  3165                           
  3166                           ;user.c: 61: ADCON1bits.ADFM = 0b1;
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  3170  0232  0021               	movlb	1	; select bank1
  3171  0233  179E               	bsf	30,7	;volatile
  3172                           
  3173                           ;user.c: 62: ADCON1bits.ADCS = 0b110;
  3174  0234  081E               	movf	30,w	;volatile
  3175  0235  398F               	andlw	-113
  3176  0236  3860               	iorlw	96
  3177  0237  009E               	movwf	30	;volatile
  3178                           
  3179                           ;user.c: 63: ADCON1bits.ADPREF = 0b00;
  3180  0238  30FC               	movlw	-4
  3181  0239  059E               	andwf	30,f	;volatile
  3182                           
  3183                           ;user.c: 64: ADCON0bits.ADON = 0b1;
  3184  023A  141D               	bsf	29,0	;volatile
  3185  023B  0008               	return
  3186  023C                     __end_of_init_adc:	
  3187                           
  3188                           	psect	text17
  3189  024C                     __ptext17:	
  3190 ;; *************** function _ConfigureOscillator *****************
  3191 ;; Defined at:
  3192 ;;		line 17 in file "system.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;		None
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;		None
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  1    wreg      void 
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1
  3206 ;;      Params:         0       0       0
  3207 ;;      Locals:         0       0       0
  3208 ;;      Temps:          0       0       0
  3209 ;;      Totals:         0       0       0
  3210 ;;Total ram usage:        0 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    1
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_main
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           
  3221                           ;psect for function _ConfigureOscillator
  3222  024C                     _ConfigureOscillator:	
  3223                           
  3224                           ;system.c: 19: OSCCONbits.IRCF = 0b1111;
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  3228  024C  3078               	movlw	120
  3229  024D  0021               	movlb	1	; select bank1
  3230  024E  0499               	iorwf	25,f	;volatile
  3231                           
  3232                           ;system.c: 20: OSCSTAT = 0x00;
  3233  024F  019A               	clrf	26	;volatile
  3234  0250  0008               	return
  3235  0251                     __end_of_ConfigureOscillator:	
  3236                           
  3237                           	psect	intentry
  3238  0004                     __pintentry:	
  3239 ;; *************** function _isr *****************
  3240 ;; Defined at:
  3241 ;;		line 23 in file "interrupts.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;		None
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;		None
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		None
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1
  3255 ;;      Params:         0       0       0
  3256 ;;      Locals:         0       0       0
  3257 ;;      Temps:          1       0       0
  3258 ;;      Totals:         1       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		Interrupt level 1
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268  0004                     _isr:	
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _isr: []
  3272  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3273  0005  3180               	pagesel	$
  3274  0006  0020               	movlb	0	; select bank0
  3275  0007  087F               	movf	127,w
  3276  0008  00F0               	movwf	??_isr
  3277  0009  0870               	movf	??_isr,w
  3278  000A  00FF               	movwf	127
  3279  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3280  000C  0009               	retfie
  3281  000D                     __end_of_isr:	
  3282  007E                     btemp	set	126	;btemp
  3283  007E                     int$flags	set	126
  3284  007E                     wtemp	set	126
  3285  007E                     wtemp0	set	126
  3286  0080                     wtemp1	set	128
  3287  0082                     wtemp2	set	130
  3288  0084                     wtemp3	set	132
  3289  0086                     wtemp4	set	134
  3290  0088                     wtemp5	set	136
  3291  007F                     wtemp6	set	127
  3292  007E                     ttemp	set	126
  3293  007E                     ttemp0	set	126
  3294  0081                     ttemp1	set	129
  3295  0084                     ttemp2	set	132
  3296  0087                     ttemp3	set	135
  3297  007F                     ttemp4	set	127
  3298  007E                     ltemp	set	126
  3299  007E                     ltemp0	set	126
  3300  0082                     ltemp1	set	130
  3301  0086                     ltemp2	set	134
  3302  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      9      27
    BANK1            32      0       0

Pointer List with Targets:

    HEF_ByteArrayRead@bArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 

    HEF_ByteArrayWrite@byteArray	PTR unsigned char  size(1) Largest target is 4
		 -> pedalState(BANK0[4]), 


Critical Paths under _main in COMMON

    _wait_ms->___lmul
    _updateSwitch1State->_saveState
    _saveState->_HEF_ByteArrayWrite
    _HEF_ByteArrayWrite->_FLASH_EraseBlock
    _initStateManager->_getCurrentState
    _getCurrentState->_HEF_ByteArrayRead
    _HEF_ByteArrayRead->_FLASH_ReadWord

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_initSwitch1
    _updateSwitch1->_setSwitch1State
    _initSwitch1->_setSwitch1State
    _setSwitch1State->_updateSwitch1State
    _updateSwitch1State->_saveState
    _initStateManager->_getCurrentState

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3193
                _ConfigureOscillator
                            _InitApp
                        _initSwitch1
                      _updateSwitch1
 ---------------------------------------------------------------------------------
 (1) _updateSwitch1                                        1     1      0    1308
                                              7 BANK0      1     1      0
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (1) _initSwitch1                                          2     2      0    1885
                                              7 BANK0      2     2      0
                    _getSwitch1State
                    _setSwitch1State
 ---------------------------------------------------------------------------------
 (2) _setSwitch1State                                      2     0      2    1308
                                              5 BANK0      2     0      2
                 _updateSwitch1State
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2     370
                                              0 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitch1State                                   2     0      2     636
                                              3 BANK0      2     0      2
                          _saveState
 ---------------------------------------------------------------------------------
 (4) _saveState                                            4     4      0     527
                                             12 COMMON     1     1      0
                                              0 BANK0      3     3      0
                 _HEF_ByteArrayWrite
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayWrite                                   9     7      2     526
                                              4 COMMON     8     6      2
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     195
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getSwitch1State                                      2     0      2     554
                                              1 BANK0      2     0      2
                   _initStateManager
 ---------------------------------------------------------------------------------
 (3) _initStateManager                                     0     0      0     554
                    _getCurrentState
 ---------------------------------------------------------------------------------
 (4) _getCurrentState                                      3     3      0     554
                                             11 COMMON     2     2      0
                                              0 BANK0      1     1      0
                  _HEF_ByteArrayRead
 ---------------------------------------------------------------------------------
 (5) _HEF_ByteArrayRead                                    7     5      2     553
                                              4 COMMON     7     5      2
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (6) _FLASH_ReadWord                                       3     1      2     259
                                              1 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
   _initSwitch1
     _getSwitch1State
       _initStateManager
         _getCurrentState
           _HEF_ByteArrayRead
             _FLASH_ReadWord
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul
   _updateSwitch1
     _setSwitch1State
       _updateSwitch1State
         _saveState
           _HEF_ByteArrayWrite
             _FLASH_EraseBlock
       _wait_ms
         ___lmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      28       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      1B       6       33.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      28       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Dec 17 11:52:22 2016

                _updateSwitch1 001F                    __CFG_CP$OFF 0000                             l67 0188  
                  __CFG_LVP$ON 0000                            l137 00C9                            l997 008C  
                          u405 0092                            u505 0153                            u435 0111  
                          u515 015A                            u605 002B                            u615 003B  
                          u570 00F4                            u565 00D9                            u655 0068  
              _getCurrentState 01B3                            _isr 0004                   __CFG_BORV$LO 0000  
                          wreg 0009                           l1001 008E                           l1115 022C  
                         l1035 00A6                           l1107 0214                           l1131 00F6  
                         l1053 0125                           l1061 013B                           l1049 0123  
                         l1161 0054                           l1153 0042                           l1075 01CA  
                         l1083 0148                           l1173 0073                           l1165 005B  
                         l1149 0032                           l1087 0152                           l1167 005F  
                         l1249 0245                           ?_isr 0070                   __CFG_WRT$OFF 0000  
   __end_of_HEF_ByteArrayWrite 00D2                           _main 0242                           fsr0h 0005  
                         fsr1h 0007                           fsr0l 0004                           indf0 0000  
                         indf1 0001                           fsr1l 0006                           btemp 007E  
                         ltemp 007E                           start 000D                           ttemp 007E  
                         wtemp 007E                  __CFG_MCLRE$ON 0000                 ?_updateSwitch1 0070  
              __end_of_InitApp 01FD                          ??_isr 0070                          ?_main 0070  
                 ?_initSwitch1 0070                  __CFG_WDTE$OFF 0000                          _PMADR 0191  
     __size_of_getSwitch1State 000C            _ConfigureOscillator 024C            ___lmul@multiplicand 0075  
           _updateSwitch1State 020D                 __CFG_BOREN$OFF 0000                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
              __end_of_wait_ms 0197                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003         HEF_ByteArrayRead@block 0074                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
       HEF_ByteArrayRead@count 0075            ?_updateSwitch1State 0031           ?_ConfigureOscillator 0070  
              __initialization 000E                   __end_of_main 0247        __end_of_getCurrentState 01CF  
               __CFG_LPBOR$OFF 0000               _initStateManager 0247                         ??_main 007D  
         ??_updateSwitch1State 007D        __size_of_FLASH_ReadWord 0019              _HEF_ByteArrayRead 010C  
                       _ADRESH 009C                         _ADRESL 009B             ?_HEF_ByteArrayRead 0074  
                       _PMADRH 0192                         _PMADRL 0191                         _PMDATH 0194  
                       _PMDATL 0193                         _PMCON2 0196      __size_of_FLASH_EraseBlock 001C  
                    ??_InitApp 0071          ??_ConfigureOscillator 0071                ??_updateSwitch1 0035  
          ??_HEF_ByteArrayRead 0076                 __CFG_PWRTE$OFF 0000                         ___lmul 0140  
               __CFG_STVREN$ON 0000               __end_of_init_adc 023C        FLASH_ReadWord@flashAddr 0071  
    __end_of_HEF_ByteArrayRead 0140        HEF_ByteArrayRead@bArray 007A                      ??_wait_ms 007D  
                _switch1_state 0037              ??_getSwitch1State 007D        __end_of__initialization 001C  
             getCurrentState@r 002E                 __pcstackCOMMON 0070                   __pidataBANK0 0251  
             ?_getCurrentState 0070           __size_of_initSwitch1 000C                     __pbssBANK0 0020  
       setSwitch1State@f_state 0033                     __pmaintext 0242                        ?___lmul 0071  
                   __pintentry 0004             _HEF_ByteArrayWrite 007F             __size_of_saveState 0010  
     __size_of_setSwitch1State 003A                 ___lmul@product 0079                 _FLASH_ReadWord 01CF  
          ?_HEF_ByteArrayWrite 0074     __size_of_HEF_ByteArrayRead 0034                        _OSCSTAT 009A  
             _FLASH_EraseBlock 0197       __end_of_initStateManager 024C                      ?_init_adc 0070  
                      _InitApp 01E8           ??_HEF_ByteArrayWrite 0076                     _pedalState 002A  
              __size_of___lmul 002F         __end_of_FLASH_ReadWord 01E8                        __ptext1 001F  
                      __ptext2 021A                        __ptext3 00D2                        __ptext4 016F  
                      __ptext5 0140                        __ptext6 020D                        __ptext7 01FD  
                      __ptext8 007F                        __ptext9 0197                      _T2CONbits 001C  
                 __size_of_isr 0009                        _wait_ms 016F                        clrloop0 023D  
         end_of_initialization 001C              __end_of_saveState 020D                     ??_init_adc 0071  
                  wait_ms@time 002E      FLASH_ReadWord@GIEBitValue 0073                 _switch1_toggle 0028  
              ?_FLASH_ReadWord 0071                      _PORTAbits 000C                _getSwitch1State 0226  
  __size_of_updateSwitch1State 000D              ??_setSwitch1State 007D               __CFG_FOSC$INTOSC 0000  
                    _TRISAbits 008C                      _TRISCbits 008E       HEF_ByteArrayRead@wordAdd 0078  
  __end_of_ConfigureOscillator 0251        HEF_ByteArrayWrite@block 0079        HEF_ByteArrayWrite@count 0075  
                   _switch1_up 0039          __end_of_updateSwitch1 007F                 __end_of___lmul 016F  
          start_initialization 000E                    __end_of_isr 000D                       ??___lmul 0079  
      __end_of_getSwitch1State 0232                    __pdataBANK0 0037    FLASH_EraseBlock@GIEBitValue 0073  
     __end_of_FLASH_EraseBlock 01B3                  ??_initSwitch1 007D                      ___latbits 0000  
      updateSwitch1State@state 0031                  __pcstackBANK0 002E       __size_of_getCurrentState 001C  
            ?_initStateManager 0070                       ?_InitApp 0070              __size_of_init_adc 000A  
           ??_initStateManager 007D    HEF_ByteArrayWrite@blockAddr 007A                     saveState@r 007C  
                     ?_wait_ms 002E            __end_of_initSwitch1 0226    HEF_ByteArrayWrite@byteArray 0074  
                     _LATAbits 010C                       _LATCbits 010E                      clear_ram0 023C  
                    _saveState 01FD    __size_of_HEF_ByteArrayWrite 0053                       _PIR1bits 0011  
    FLASH_EraseBlock@startAddr 0071               ??_FLASH_ReadWord 0073                _setSwitch1State 00D2  
             ?_getSwitch1State 002F                     _ADCON0bits 009D                     _ADCON1bits 009E  
            ___lmul@multiplier 0071              ??_getCurrentState 007B           initSwitch1@initState 0035  
                   ?_saveState 0070               __size_of_InitApp 0015     __end_of_updateSwitch1State 021A  
                  _initSwitch1 021A                     _ANSELAbits 018C                       __ptext10 0226  
                     __ptext11 0247                       __ptext12 01B3                       __ptext13 010C  
                     __ptext14 01CF                       __ptext15 01E8                       __ptext16 0232  
                     __ptext17 024C               __size_of_wait_ms 0028                       _init_adc 0232  
                __size_of_main 0005        __end_of_setSwitch1State 010C   __size_of_ConfigureOscillator 0005  
                     int$flags 007E              ?_FLASH_EraseBlock 0071             ??_FLASH_EraseBlock 0073  
                   _INTCONbits 000B         __size_of_updateSwitch1 0060                       intlevel1 0000  
                   _PMCON1bits 0195  HEF_ByteArrayWrite@GIEBitValue 0078              __CFG_CLKOUTEN$OFF 0000  
                  ??_saveState 002E                     _OSCCONbits 0099                  _isInitialized 0024  
                 wait_ms@timel 0020      __size_of_initStateManager 0005                _switch1_pressed 0026  
             ?_setSwitch1State 0033  
